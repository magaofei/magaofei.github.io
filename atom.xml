<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马面的部落格</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://magaofei.github.io/"/>
  <updated>2021-03-01T21:30:01.152Z</updated>
  <id>https://magaofei.github.io/</id>
  
  <author>
    <name>mark</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>52.一入 Java 深似海</title>
    <link href="https://magaofei.github.io/2021/03/01/52.%E4%B8%80%E5%85%A5%20Java%20%E6%B7%B1%E4%BC%BC%E6%B5%B7/"/>
    <id>https://magaofei.github.io/2021/03/01/52.一入 Java 深似海/</id>
    <published>2021-03-01T21:30:01.152Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一入-Java-深似海"><a href="#一入-Java-深似海" class="headerlink" title="一入 Java 深似海"></a>一入 Java 深似海</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="匿名内置类"><a href="#匿名内置类" class="headerlink" title="匿名内置类"></a>匿名内置类</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一入-Java-深似海&quot;&gt;&lt;a href=&quot;#一入-Java-深似海&quot; class=&quot;headerlink&quot; title=&quot;一入 Java 深似海&quot;&gt;&lt;/a&gt;一入 Java 深似海&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Java语言和Docker实现一套简易的CI工具</title>
    <link href="https://magaofei.github.io/2021/02/06/60.%20%E4%BD%BF%E7%94%A8Java%E8%AF%AD%E8%A8%80%E5%92%8CDocker%E5%AE%9E%E7%8E%B0%E4%B8%80%E5%A5%97%E7%AE%80%E6%98%93CI%E5%B7%A5%E5%85%B7/"/>
    <id>https://magaofei.github.io/2021/02/06/60. 使用Java语言和Docker实现一套简易CI工具/</id>
    <published>2021-02-06T16:37:00.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<p>在现在有许多CI产品，例如 GitLab Runner 、GitHub Action 、Travis CI 等，本文将模拟 GitHub Action ，实现一套最简单的 CI 。</p><p>CI 的执行器主要分2种情况，针对于 Windows/macOS 平台，执行方式为 Shell ，对于 Linux 平台，执行方式为 Docker，今天这里主要讨论后者。</p><p>代码已开放到 GitHub ，欢迎 Star</p><p><a href="https://github.com/magaofei/expert-ci" target="_blank" rel="noopener">https://github.com/magaofei/expert-ci</a></p><h2 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h2><p>其实要做的不过于2点，如下</p><ul><li>解析配置文件</li><li>动态执行销毁容器或Shell</li></ul><p>Docker出现之后，过去的Jenkins上利用虚拟机执行Shell的方式会被替代，你问我为什么会被替代？举个例子，如果我要跑多个语言版本的单元测试或者脚本，过去要维护多个环境，人力成本高，且资源利用程度低。切换为容器之后，只需要独立出来一个进程，维护成本变低了。</p><p>所以CI工具执行，我理解为是一个容器的执行过程。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为什么用Java语言？</p><p>Docker本身是用Go语言写的，不过其对外暴露了API，我们可以使用接口的方式去调用，和语言无关，我本身比较熟悉Java，所以使用Java语言来做。</p><p>不再造轮子，我直接使用 <code>com.github.docker-java</code> 这个库来操作Docker</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>能够执行单个 Job 任务，能够执行 run 里边的命令</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>主要分为5个步骤</p><ol><li>安装依赖</li><li>定义实体类</li><li>解析配置文件</li><li>生成Dockerfile</li><li>执行容器任务</li></ol><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.github.docker-java&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;docker-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;!-- use latest version &lt;https:<span class="comment">//github.com/docker-java/docker-java/releases&gt; --&gt;</span></span><br><span class="line">  &lt;version&gt;3.2.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>用 Jackson 来解析 Yaml</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-dataformat-yaml&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.12.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.12.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>用 JUnit4做单元测试</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.13&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="定义实体类"><a href="#定义实体类" class="headerlink" title="定义实体类"></a>定义实体类</h3><p>这里模拟 GitHub Action 定义一个实体，这里只是部分实现。为了方便浏览，我把多余的 setter getter 方法已去掉。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> On on;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; env;</span><br><span class="line">    <span class="keyword">private</span> LinkedHashMap&lt;String <span class="comment">/* build name*/</span>, Job&gt; jobs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">On</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Branch push;</span><br><span class="line">        <span class="meta">@JsonProperty</span>(<span class="string">"pull_request"</span>)</span><br><span class="line">        <span class="keyword">private</span> Branch pullRequest;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Branch</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; branches;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; needs;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* equals image name*/</span></span><br><span class="line">        <span class="meta">@JsonProperty</span>(<span class="string">"runs-on"</span>)</span><br><span class="line">        <span class="keyword">private</span> String runsOn;</span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, String&gt; environment;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Step&gt; steps;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Step</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; run;</span><br><span class="line">        <span class="comment">/* environment for step TODO impl */</span></span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, String&gt; with;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="解析配置文件"><a href="#解析配置文件" class="headerlink" title="解析配置文件"></a>解析配置文件</h3><p>这里直接用 Jackson 的方法解析 Yaml 文件，转换为实体</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YamlConfigParser</span> <span class="keyword">implements</span> <span class="title">ConfigParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(YamlConfigParser<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper OM = <span class="keyword">new</span> ObjectMapper(<span class="keyword">new</span> YAMLFactory());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionConfig <span class="title">parser</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ActionConfig actionConfig = <span class="keyword">new</span> ActionConfig();</span><br><span class="line">        <span class="comment">// 转换实体类</span></span><br><span class="line">        actionConfig = OM.readValue(inputStream, ActionConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> actionConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成Dockerfile"><a href="#生成Dockerfile" class="headerlink" title="生成Dockerfile"></a>生成Dockerfile</h3><p>在生成 Dockerfile 之前，我再定义一个实体，用来存储 Docker 配置信息，这里只是简单实现，所以我没有写其他的属性信息。</p><h4 id="DockerConfig"><a href="#DockerConfig" class="headerlink" title="DockerConfig"></a>DockerConfig</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DockerConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; volume;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; tag;</span><br><span class="line">    <span class="keyword">private</span> String dockerfile;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; runs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再增加一个从实体转换和生成 Dockerfile 的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DockerConfig <span class="title">convert</span><span class="params">(ActionConfig actionConfig)</span> </span>&#123;</span><br><span class="line">        DockerConfig dockerConfig = <span class="keyword">new</span> DockerConfig();</span><br><span class="line">        Set&lt;String&gt; tag = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        dockerConfig.setTag(tag);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, ActionConfig.Job&gt; jobEntry : actionConfig.getJobs().entrySet()) &#123;</span><br><span class="line">            String buildName = jobEntry.getKey();</span><br><span class="line">            tag.add(buildName);</span><br><span class="line"></span><br><span class="line">            ActionConfig.Job job = jobEntry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (job.getSteps().isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> dockerConfig;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// Docker Image 和 tag 用 : 分隔</span></span><br><span class="line">            dockerConfig.setImage(job.getRunsOn().replace(<span class="string">"-"</span>, <span class="string">":"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (ActionConfig.Step step : job.getSteps()) &#123;</span><br><span class="line">                dockerConfig.getRuns().addAll((step.getRun()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dockerConfigConvertToDockerfile(dockerConfig);</span><br><span class="line">        <span class="keyword">return</span> dockerConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 Dockerfile</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dockerConfigConvertToDockerfile</span><span class="params">(DockerConfig dockerConfig)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; runs = dockerConfig.getRuns();</span><br><span class="line">        String cmd = String.join(<span class="string">" &amp;&amp; "</span>, runs);</span><br><span class="line">        String dockerfile = String.format(</span><br><span class="line">                <span class="string">"FROM %s\\n"</span> +</span><br><span class="line">                        <span class="string">"CMD /bin/sh -c \\"</span> %s \\<span class="string">""</span>, dockerConfig.getImage(), cmd);</span><br><span class="line">        dockerConfig.setDockerfile(dockerfile);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="执行容器任务"><a href="#执行容器任务" class="headerlink" title="执行容器任务"></a>执行容器任务</h3><p>把 Dockerfile 写入到文件中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Path <span class="title">initDockerfile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Path build = Paths.get(<span class="string">"build"</span>);</span><br><span class="line">        Path dockerfilePath = Paths.get(<span class="string">"build"</span>, <span class="string">"Dockerfile"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Files.createDirectory(build);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileAlreadyExistsException ignore) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Files.write(dockerfilePath, <span class="keyword">this</span>.dockerConfig.getDockerfile().getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">return</span> dockerfilePath;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>初始化 Docker 配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DockerExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DockerExecutor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DockerConfig dockerConfig;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DockerClient dockerClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CreateContainerResponse containerResponse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String imageId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 Docker 配置，这里默认设置的是当前机器的 docker.sock 的路径</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ActionConfig actionConfig)</span> </span>&#123;</span><br><span class="line">        DockerClientConfig standard = DefaultDockerClientConfig.createDefaultConfigBuilder().build();</span><br><span class="line">        DockerHttpClient httpClient = <span class="keyword">new</span> ApacheDockerHttpClient.Builder().dockerHost(standard.getDockerHost()).sslConfig(standard.getSSLConfig()).build();</span><br><span class="line">        <span class="keyword">this</span>.dockerClient = DockerClientImpl.getInstance(standard, httpClient);</span><br><span class="line">        <span class="keyword">this</span>.dockerConfig = ActionToDocker.convert(actionConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.runContainer();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.warn(<span class="string">" e"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来主要是调用容器的 build 和 run</p><p>build</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildImage</span><span class="params">(Path dockerfilePath)</span> </span>&#123;</span><br><span class="line">        SampleBuildImageResultCallback sampleBuildImageResultCallback = <span class="keyword">new</span> SampleBuildImageResultCallback();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.imageId = <span class="keyword">this</span>.dockerClient.buildImageCmd()</span><br><span class="line">                    .withTags(<span class="keyword">this</span>.dockerConfig.getTag())</span><br><span class="line">                    .withPull(<span class="keyword">true</span>)</span><br><span class="line">                    .withBaseDirectory(dockerfilePath.getParent().toFile())</span><br><span class="line">                    .withDockerfile(dockerfilePath.toFile())</span><br><span class="line">                    .exec(sampleBuildImageResultCallback)</span><br><span class="line">                    .awaitImageId();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.warn(<span class="string">"build image error "</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>run</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runContainer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Path dockerfilePath = <span class="keyword">this</span>.initDockerfile();</span><br><span class="line">        <span class="keyword">this</span>.buildImage(dockerfilePath);</span><br><span class="line">        CreateContainerResponse containerResponse;</span><br><span class="line">        HostConfig hostConfig = <span class="keyword">new</span> HostConfig();</span><br><span class="line">        List&lt;Bind&gt; bindList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// docker volume 挂载</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : <span class="keyword">this</span>.dockerConfig.getVolume().entrySet()) &#123;</span><br><span class="line">            String host = entry.getKey();</span><br><span class="line">            String containerVolume = entry.getValue();</span><br><span class="line">            bindList.add(<span class="keyword">new</span> Bind(host, <span class="keyword">new</span> Volume(containerVolume)));</span><br><span class="line">        &#125;</span><br><span class="line">        hostConfig.withBinds(bindList);</span><br><span class="line">        <span class="comment">// 启动</span></span><br><span class="line">        <span class="keyword">try</span> (CreateContainerCmd createContainerCmd = <span class="keyword">this</span>.dockerClient.createContainerCmd(<span class="keyword">this</span>.imageId)) &#123;</span><br><span class="line">            containerResponse = createContainerCmd</span><br><span class="line">                    .withHostConfig(hostConfig)</span><br><span class="line">                    .withTty(<span class="keyword">true</span>)</span><br><span class="line">                    .exec();</span><br><span class="line">            <span class="keyword">this</span>.dockerClient.startContainerCmd(containerResponse.getId()).exec();</span><br><span class="line">            <span class="keyword">this</span>.containerResponse = containerResponse;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 日志输出</span></span><br><span class="line">            showLog(dockerClient, containerResponse.getId(), <span class="keyword">true</span>, <span class="number">1</span>, <span class="keyword">new</span> LogContainerCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Frame frame)</span> </span>&#123;</span><br><span class="line">                    String message = <span class="keyword">new</span> String(frame.getPayload());</span><br><span class="line">                    logger.info(<span class="string">"&#123;&#125;"</span>, message);</span><br><span class="line">                    <span class="keyword">super</span>.onNext(frame);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"wait container cmd"</span>);</span><br><span class="line">            <span class="comment">// 等待容器执行完毕，设置超时时间为30分钟</span></span><br><span class="line">            <span class="keyword">try</span> (WaitContainerResultCallback waitContainerResultCallback = <span class="keyword">new</span> WaitContainerResultCallback()) &#123;</span><br><span class="line">                <span class="keyword">int</span> exitCode = dockerClient.waitContainerCmd(containerResponse.getId()).exec(waitContainerResultCallback)</span><br><span class="line">                        .awaitStatusCode(<span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">                logger.info(<span class="string">"exitCode = &#123;&#125;"</span>, exitCode);</span><br><span class="line">                <span class="keyword">if</span> (exitCode != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"exit = "</span> + exitCode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 结束时，销毁容器，删除镜像</span></span><br><span class="line">            <span class="keyword">this</span>.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>停止容器的运行和删除镜像</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.containerResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">                logger.info(<span class="string">"start stop container"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dockerClient.stopContainerCmd(<span class="keyword">this</span>.containerResponse.getId()).exec();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NotModifiedException e) &#123;</span><br><span class="line">                    logger.warn(<span class="string">"Container already stopped"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                logger.info(<span class="string">"end stop container"</span>);</span><br><span class="line"></span><br><span class="line">                logger.info(<span class="string">"start remove container id = &#123;&#125;"</span>, <span class="keyword">this</span>.containerResponse.getId());</span><br><span class="line">                dockerClient.removeContainerCmd(<span class="keyword">this</span>.containerResponse.getId()).exec();</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"start remove image id = &#123;&#125;"</span>, <span class="keyword">this</span>.imageId);</span><br><span class="line">            dockerClient.removeImageCmd(<span class="keyword">this</span>.imageId).exec();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.warn(<span class="string">" e"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里基本上就结束了，看起来很简单，找一个用例试一下。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>这个配置文件的内容很简单，会基于 ubuntu:latest  这个版本的镜像做基础，在这个上面执行相关命令。主要有4个命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello, world!</span><br><span class="line">apt-get update -y</span><br><span class="line">apt-get install -y git</span><br><span class="line">git <span class="built_in">clone</span> &lt;https://github.com/magaofei/expert-ci.git&gt;</span><br><span class="line">name: CI</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ hexo ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: []</span><br><span class="line"></span><br><span class="line"><span class="comment">## A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  <span class="comment"># This workflow contains a single job called "build"</span></span><br><span class="line">  build:</span><br><span class="line">    <span class="comment"># The type of runner that the job will run on</span></span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class="line">    steps:</span><br><span class="line">      <span class="comment"># Runs a single command using the runners shell</span></span><br><span class="line">      - name: Run a one-line script</span><br><span class="line">        run:</span><br><span class="line">          - <span class="built_in">echo</span> Hello, world!</span><br><span class="line"></span><br><span class="line">      - name: build</span><br><span class="line">        run:</span><br><span class="line">          - apt-get update -y</span><br><span class="line">          - apt-get install -y git</span><br><span class="line">          - git <span class="built_in">clone</span> &lt;https://github.com/magaofei/expert-ci.git&gt;</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Step 1/2 : FROM ubuntu:latest</span><br><span class="line"></span><br><span class="line"> ---&gt; f643c72bc252</span><br><span class="line"></span><br><span class="line">Step 2/2 : CMD /bin/sh -c <span class="string">" echo Hello, world! &amp;&amp; apt-get update -y &amp;&amp; apt-get install -y git &amp;&amp; git clone &lt;https://github.com/magaofei/expert-ci.git&gt; "</span></span><br><span class="line"></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 8602bb97fd46</span><br><span class="line"></span><br><span class="line">Removing intermediate container 8602bb97fd46</span><br><span class="line"></span><br><span class="line"> ---&gt; b4de22f20e13</span><br><span class="line"></span><br><span class="line">Successfully built b4de22f20e13</span><br><span class="line"></span><br><span class="line">Successfully tagged build:latest</span><br><span class="line"></span><br><span class="line">build image finish</span><br><span class="line"></span><br><span class="line">H</span><br><span class="line">ello, world!</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">Cloning into <span class="string">'expert-ci'</span>...</span><br><span class="line"></span><br><span class="line">remote: Enumerating objects: 69, <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">remote: Counting objects:</span><br><span class="line">remote: Counting objects:  71% (49/69)</span><br><span class="line">remote: Counting objects: 100% (69/69), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">remote: Compressing objects:  65% (23/35)[</span><br><span class="line">remote: Compressing objects: 100% (35/35), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">remote: Total 69 (delta 17), reused 65 (delta 16), pack-reused 0</span><br><span class="line"></span><br><span class="line">Unpacking objects:  78% (54/69)</span><br><span class="line">Unpacking objects: 100% (69/69), 17.57 KiB | 408.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">exitCode = 0</span><br><span class="line">start stop container</span><br><span class="line"></span><br><span class="line">end stop container</span><br><span class="line">start remove container id = 3a5a4b7519f649a48334a2c43952a79ecb1f87a9255f3cc9ac1d168465f11078</span><br><span class="line">start remove image id = b4de22f20e13</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><p>可以看到，克隆代码的命令已经成功执行结束了，后边也可以去执行更多的指令。</p><p>至此，一个极简版本的CI工具就完成了。</p><p>后续可以支持更多功能，比如增加页面展示，根据分支触发任务执行，支持多个 job、stage 等等。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>容器是一个划时代产物。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在现在有许多CI产品，例如 GitLab Runner 、GitHub Action 、Travis CI 等，本文将模拟 GitHub Action ，实现一套最简单的 CI 。&lt;/p&gt;
&lt;p&gt;CI 的执行器主要分2种情况，针对于 Windows/macOS 平台，执行方
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用 GitHub Action 发布 Hexo 博客 GitHub Pages</title>
    <link href="https://magaofei.github.io/2020/11/24/59.%20%E5%88%A9%E7%94%A8%20GitHub%20Action%20%E5%8F%91%E5%B8%83%20Hexo%20%E5%8D%9A%E5%AE%A2/"/>
    <id>https://magaofei.github.io/2020/11/24/59. 利用 GitHub Action 发布 Hexo 博客/</id>
    <published>2020-11-24T23:00:00.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用GitHub-Action发布-Hexo-博客-GitHub-Pages"><a href="#利用GitHub-Action发布-Hexo-博客-GitHub-Pages" class="headerlink" title="利用GitHub Action发布 Hexo 博客 GitHub Pages"></a>利用GitHub Action发布 Hexo 博客 GitHub Pages</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>GitHub Action 是新出的，相较于 Travis 这些较新出的 CI 工具，我之前的博客是用 hexo (<a href="https://magaofei.github.io">https://magaofei.github.io</a>) 搭建的，刚刚尝试更新了一篇博文，但是发现 Travis 需要排队，等待时间比较长，所以就试了下 GitHub Action ，发现速度很快，所以迁移过来了。</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the action will run. </span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Triggers the workflow on push or pull request events but only for the hexo branch</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">hexo</span> <span class="string">]</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">hexo</span> <span class="string">]</span></span><br><span class="line">  <span class="comment"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># This workflow contains a single job called "build"</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># The type of runner that the job will run on</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Runs a single command using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">one-line</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">Hello,</span> <span class="string">world!</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">14.15</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="number">14.15</span><span class="number">.1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">cl</span>  <span class="comment">#清除</span></span><br><span class="line">          <span class="string">git</span> <span class="string">clone</span> <span class="string">--depth=2</span> <span class="string">https://github.com/ahonn/hexo-theme-even</span> <span class="string">themes/even</span></span><br><span class="line">          <span class="string">mv</span> <span class="string">even_theme.yml</span> <span class="string">themes/even/_config.yml</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">g</span>  <span class="comment">#生成</span></span><br><span class="line">          <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">          <span class="string">git</span> <span class="string">init</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"magaofei"</span>  <span class="comment">#修改name</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"mamian521@gmail.com"</span>  <span class="comment">#修改email</span></span><br><span class="line">          <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">          <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"update"</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"https://$<span class="template-variable">&#123;&#123; secrets.DEPLOY_BLOG &#125;&#125;</span>@github.com/magaofei/magaofei.github.io.git"</span> <span class="string">master:master</span></span><br></pre></td></tr></table></figure><p>这是我的脚本内容，比较粗躁，我解释下。</p><p>首先，只在 hexo 分支 push 后，或者该分支的 pr 触发。</p><ol><li>Jobs 任务数量</li><li>build 执行构建</li><li>runs-on 操作系统</li><li>steps 步骤，步骤从到后执行</li><li>Step1 ，使用 actions/checkout@v2 ，这里可以复用别人的 action , 作用是初始化目录，下载代码，checkout 到指定分支</li><li>Step2，输出 HelloWorld，这里是之前的，没删掉</li><li>Step3， Use Node.js 14.15.1 ，这里设置了基础环境，设置 nodejs 版本，不得不说，GitHub Action 这个服用机制做的好，易于使用，对了，他这块实现的时候应该有缓存吧</li><li>Step4，构建博客</li></ol><h2 id="构建博客"><a href="#构建博客" class="headerlink" title="构建博客"></a>构建博客</h2><ol><li>先安装 hexo</li><li>安装依赖</li><li>清除项目中的 hexo 生成的文件</li><li>下载 主题</li><li>设置主题的配置</li><li>生成 hexo html</li><li>跳转到 public 目录</li><li>初始化 git</li><li>设置 git 提交人姓名</li><li>设置 git 提交人邮箱</li><li>添加到暂存区</li><li>提交到版本库</li><li>强制push到主分支，因为 GitHub Pages 是使用该仓库 master 主分支来渲染的，所以这里我们直接覆盖主分支就相当于上线了。</li></ol><p>这里额外讲一下 secrets.DEPLOY_BLOG 这个变量，这个是我的 个人token，<code>personal access token</code></p><p>首先打开 GitHub 的用户配置，<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a> ，左侧选择 <code>personal access token</code>，然后选择 <code>Generate new token</code> 去生成新的 token ，勾选 repo 权限，然后复制生成的 token，打开 你的 博客仓库，选择 settings 选项卡，选择左侧的 secrets 创建新的仓库 secret ，内容是刚刚生成的 token ，名字任意起，我的是叫做 <code>DEPLOY_BLOG</code>，接下来把这个名字前面加个 <code>secrets.</code> 就可以放到 GitHub Action 中使用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;利用GitHub-Action发布-Hexo-博客-GitHub-Pages&quot;&gt;&lt;a href=&quot;#利用GitHub-Action发布-Hexo-博客-GitHub-Pages&quot; class=&quot;headerlink&quot; title=&quot;利用GitHub Action发
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SonarScanner 源码分析</title>
    <link href="https://magaofei.github.io/2020/11/24/58.SonarScanner%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://magaofei.github.io/2020/11/24/58.SonarScanner源码分析/</id>
    <published>2020-11-24T14:00:00.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h2><p>SonarQube是一个静态代码扫描平台，支持主流语言的静态代码扫描分析。</p><p>SonarQube主要分为几个模块：WebServer、CeServer、Scanner</p><p>今天主要对 Scanner 分析一下源码，其中Scanner是在本地执行扫描分析的工具，也就是说SonarScanner是在本地执行扫描分析之后将结果上传到服务端进行分析。本文重点介绍一下 Scanner 的源码和原理。</p><p>SonarScanner 的源码主要有三部分，一个是 SonarScannerCli 用来执行命令和接收参数(<a href="https://github.com/SonarSource/sonar-scanner-cli.git)，另一个是" target="_blank" rel="noopener">https://github.com/SonarSource/sonar-scanner-cli.git)，另一个是</a> SonarScannerApi ，主要用来下载插件包和加载类 (<a href="https://github.com/SonarSource/sonar-scanner-api.git)，还有真正用来执行扫描的" target="_blank" rel="noopener">https://github.com/SonarSource/sonar-scanner-api.git)，还有真正用来执行扫描的</a> SonarScannerEngine (<a href="https://github.com/SonarSource/sonarqube/tree/master/sonar-scanner-engine" target="_blank" rel="noopener">https://github.com/SonarSource/sonarqube/tree/master/sonar-scanner-engine</a>)</p><p>本文主要分析一下前两部分。</p><h3 id="SonarScannerCli"><a href="#SonarScannerCli" class="headerlink" title="SonarScannerCli"></a>SonarScannerCli</h3><p>目录结构：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gl0nmbtmxkj30l00eomya.jpg" alt=""></p><p>可以看出，Cli 的源码并不多，入口是 <code>Main</code> 类的 <code>main</code> 函数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Logs logs = new Logs(System.out, System.err);</span><br><span class="line">Exit <span class="built_in">exit</span> = new Exit();</span><br><span class="line">Cli cli = new Cli(<span class="built_in">exit</span>, logs).parse(args);</span><br><span class="line">Main main = new Main(<span class="built_in">exit</span>, cli, new Conf(cli, logs, System.getenv()), new ScannerFactory(logs), logs);</span><br><span class="line">main.execute();</span><br></pre></td></tr></table></figure><p>主要的几个类：</p><p>Logs 用来记录日志</p><p>Exit 记录退出码</p><p>Cli 用来解析命令行执行时传递的变量</p><p>Conf 类用来接收 Cli 解析之后的参数</p><p>参数主要从几个地方获取</p><ol><li>Scanner 全局设置(Scanner安装目录/<code>conf/sonar-scanner.properties</code>)</li><li>环境变量 (key = <code>SONARQUBE_SCANNER_PARAMS</code> value 格式为 JSON )</li><li>仓库文件 (<code>sonar-project.properties</code>)</li><li>命令行参数 (通过 Java Properties 传递)</li></ol><p>最后在 Main 里的 <code>execute</code> 方法中执行扫描</p><p>再来看看这个方法</p><h3 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 记录执行耗时</span></span><br><span class="line">    Stats stats = <span class="keyword">new</span> Stats(logger).start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认退出码为1</span></span><br><span class="line">    <span class="keyword">int</span> status = Exit.INTERNAL_ERROR;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Properties p = conf.properties();</span><br><span class="line">      <span class="comment">// 检查是否有 skip 跳过扫描的设置</span></span><br><span class="line">      checkSkip(p);</span><br><span class="line">      <span class="comment">// 根据参数设置 log 级别</span></span><br><span class="line">      configureLogging(p);</span><br><span class="line">      <span class="comment">// 初始化 runner</span></span><br><span class="line">      init(p);</span><br><span class="line">      <span class="comment">// 初始化 变量 ，下载插件</span></span><br><span class="line">      runner.start();</span><br><span class="line">      logger.info(String.format(<span class="string">"Analyzing on %s"</span>, conf.isSonarCloud(<span class="keyword">null</span>) ? <span class="string">"SonarCloud"</span> : (<span class="string">"SonarQube server "</span> + runner.serverVersion())));</span><br><span class="line">      <span class="comment">// 执行扫描</span></span><br><span class="line">      execute(stats, p);</span><br><span class="line">      status = Exit.SUCCESS;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">      displayExecutionResult(stats, <span class="string">"FAILURE"</span>);</span><br><span class="line">      showError(<span class="string">"Error during SonarScanner execution"</span>, e, cli.isDebugEnabled());</span><br><span class="line">      status = isUserError(e) ? Exit.USER_ERROR : Exit.INTERNAL_ERROR;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      exit.exit(status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>里边最重要的是 3 个方法，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">init(p);</span><br><span class="line">runner.start();</span><br><span class="line">execute(stats, p);</span><br></pre></td></tr></table></figure><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Properties p)</span> </span>&#123;</span><br><span class="line">    SystemInfo.print(logger);</span><br><span class="line">    <span class="keyword">if</span> (cli.isDisplayVersionOnly()) &#123;</span><br><span class="line">      exit.exit(Exit.SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runner = runnerFactory.create(p, cli.getInvokedFrom());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScannerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Logs logger;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ScannerFactory</span><span class="params">(Logs logger)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.logger = logger;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">EmbeddedScanner <span class="title">create</span><span class="params">(Properties props, String isInvokedFrom)</span> </span>&#123;</span><br><span class="line">    String appName = <span class="string">"ScannerCLI"</span>;</span><br><span class="line">    String appVersion = ScannerVersion.version();</span><br><span class="line">    <span class="keyword">if</span> (!isInvokedFrom.equals(<span class="string">""</span>) &amp;&amp; isInvokedFrom.contains(<span class="string">"/"</span>)) &#123;</span><br><span class="line">      appName = isInvokedFrom.split(<span class="string">"/"</span>)[<span class="number">0</span>];</span><br><span class="line">      appVersion = isInvokedFrom.split(<span class="string">"/"</span>)[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EmbeddedScanner.create(appName, appVersion, <span class="keyword">new</span> DefaultLogOutput())</span><br><span class="line">      .addGlobalProperties((Map) props);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>EmbeddedScanner runner</code> 是真正的执行的扫描的类，创建该类的实例化时，提供了一个 <code>create</code> 方法，实现了工厂设计模式。</p><p>到 <code>ScannerFactory</code> 就进入到了 ScannerApi 这个库里</p><p>可以看到，更多的细节处理在 SonarScannerApi 中，SonarScannerCli 这个库主要是进行了命令的解析及处理，后续的工作由 SonarScannerApi 来完成。</p><h3 id="SonarScannerApi"><a href="#SonarScannerApi" class="headerlink" title="SonarScannerApi"></a>SonarScannerApi</h3><p>目录结构：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gl0nnrbz3oj30ps11otd7.jpg" alt=""></p><p>我们先看一下 <code>EmbeddedScanner</code> 这个入口类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Entry point to run SonarQube analysis programmatically.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedScanner</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BITBUCKET_CLOUD_ENV_VAR = <span class="string">"BITBUCKET_BUILD_NUMBER"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SONAR_HOST_URL_ENV_VAR = <span class="string">"SONAR_HOST_URL"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SONARCLOUD_HOST = <span class="string">"&lt;https://sonarcloud.io&gt;"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> IsolatedLauncherFactory launcherFactory;</span><br><span class="line">  <span class="keyword">private</span> IsolatedLauncher launcher;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> LogOutput logOutput;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; globalProperties = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Logger logger;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; classloaderMask = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; classloaderUnmask = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> System2 system;</span><br><span class="line"></span><br><span class="line">  EmbeddedScanner(IsolatedLauncherFactory bl, Logger logger, LogOutput logOutput, System2 system) &#123;</span><br><span class="line">    <span class="keyword">this</span>.logger = logger;</span><br><span class="line">    <span class="keyword">this</span>.launcherFactory = bl;</span><br><span class="line">    <span class="keyword">this</span>.logOutput = logOutput;</span><br><span class="line">    <span class="keyword">this</span>.classloaderUnmask.add(<span class="string">"org.sonarsource.scanner.api.internal.batch."</span>);</span><br><span class="line">    <span class="keyword">this</span>.system = system;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EmbeddedScanner <span class="title">create</span><span class="params">(String app, String version, <span class="keyword">final</span> LogOutput logOutput, System2 system2)</span> </span>&#123;</span><br><span class="line">    Logger logger = <span class="keyword">new</span> LoggerAdapter(logOutput);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedScanner(<span class="keyword">new</span> IsolatedLauncherFactory(logger), logger, logOutput, system2)</span><br><span class="line">      .setGlobalProperty(InternalProperties.SCANNER_APP, app)</span><br><span class="line">      .setGlobalProperty(InternalProperties.SCANNER_APP_VERSION, version);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EmbeddedScanner <span class="title">create</span><span class="params">(String app, String version, <span class="keyword">final</span> LogOutput logOutput)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> create(app, version, logOutput, <span class="keyword">new</span> System2());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>create</code> 用来初始化和实例化 <code>EmbeddedScanner</code> 对象，主要有这几参数：</p><p>IsolatedLauncherFactory  (启动器工厂类)</p><p>Logger (日志接口)</p><p>LogOutput (日志输出接口)</p><p>System2 (和 System 类相同，额外包了一层)</p><p>里边重要的是 <code>IsolatedLauncherFactory</code> ，又是一个 工厂类，初始化了 IsolatedLauncherFactory 的属性，调用了构造方法。</p><p>综上，<code>init</code> 方法进行的操作主要是对几个关键类的实例化操作。</p><h3 id="runner-start"><a href="#runner-start" class="headerlink" title="runner.start()"></a>runner.start()</h3><p>我们再回到 <code>EmbeddedScanner.start</code> 方法里</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Download scanner-engine JAR and start bootstrapping classloader. After that it is possible to call &#123;<span class="doctag">@link</span> #serverVersion()&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置全局变量</span></span><br><span class="line">    initGlobalDefaultValues();</span><br><span class="line">    doStart();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>设置全局参数</li><li>调用 runner 的 <code>doStart</code> 方法</li></ol><p>通过注释我们可以了解到，其功能是下载扫描器的引擎jar包，并利用类加载器加载。看一下 <code>doStart</code> 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查 IsolatedLauncher 有没有实例化，如果已经实例化，说明已经启动，抛出异常</span></span><br><span class="line">    checkLauncherDoesntExist();</span><br><span class="line">    <span class="comment">// 创建 load class 的规则</span></span><br><span class="line">    ClassloadRules rules = <span class="keyword">new</span> ClassloadRules(classloaderMask, classloaderUnmask);</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    launcher = launcherFactory.createLauncher(globalProperties(), rules);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们重点看下最后一行</p><p>利用了 launcher 的工厂类来创建 <code>IsolatedClassloader</code> 对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IsolatedLauncher <span class="title">createLauncher</span><span class="params">(Map&lt;String, String&gt; props, ClassloadRules rules)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (props.containsKey(InternalProperties.SCANNER_DUMP_TO_FILE)) &#123;</span><br><span class="line">      String version = props.get(InternalProperties.SCANNER_VERSION_SIMULATION);</span><br><span class="line">      <span class="keyword">if</span> (version == <span class="keyword">null</span>) &#123;</span><br><span class="line">        version = <span class="string">"5.6"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SimulatedLauncher(version, logger);</span><br><span class="line">    &#125;</span><br><span class="line">    ServerConnection serverConnection = ServerConnection.create(props, logger);</span><br><span class="line">    JarDownloader jarDownloader = <span class="keyword">new</span> JarDownloaderFactory(serverConnection, logger, props.get(<span class="string">"sonar.userHome"</span>)).create();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createLauncher(jarDownloader, rules);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>首先判断是否传递了 <code>sonar.scanner.dumpToFile</code> 参数，如果传递后续不再执行扫描，而是把参数全部写入到指定的文件里，推测这个作用是为了调试，所以取名<code>Simulated</code> 模拟的含义。</p><p>接着和服务端也就是 SonarQube 的服务进行连接。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServerConnection <span class="title">create</span><span class="params">(Map&lt;String, String&gt; props, Logger logger)</span> </span>&#123;</span><br><span class="line">  String serverUrl = props.get(<span class="string">"sonar.host.url"</span>);</span><br><span class="line">  String userAgent = format(<span class="string">"%s/%s"</span>, props.get(SCANNER_APP), props.get(SCANNER_APP_VERSION));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ServerConnection(serverUrl, userAgent, logger);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，使用<code>OkHttp</code> 这个库来进行接口请求。</p><p>紧接着是 <code>JarDownloaderFactory</code> 工厂类的 <code>create</code> 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">JarDownloader <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FileCache fileCache = <span class="keyword">new</span> FileCacheBuilder(logger)</span><br><span class="line">      .setUserHome(userHome)</span><br><span class="line">      .build();</span><br><span class="line"></span><br><span class="line">    BootstrapIndexDownloader bootstrapIndexDownloader = <span class="keyword">new</span> BootstrapIndexDownloader(serverConnection, logger);</span><br><span class="line">    ScannerFileDownloader scannerFileDownloader = <span class="keyword">new</span> ScannerFileDownloader(serverConnection);</span><br><span class="line">    JarExtractor jarExtractor = <span class="keyword">new</span> JarExtractor();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JarDownloader(scannerFileDownloader, bootstrapIndexDownloader, fileCache, jarExtractor, logger);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这些方法依旧是为了实例化对象。</p><p>接着在 <code>IsolatedLauncherFactory</code> 中调用 <code>IsolatedLauncher createLauncher(final JarDownloader jarDownloader, final ClassloadRules rules)</code> 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">IsolatedLauncher <span class="title">createLauncher</span><span class="params">(<span class="keyword">final</span> JarDownloader jarDownloader, <span class="keyword">final</span> ClassloadRules rules)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> AccessController.doPrivileged((PrivilegedAction&lt;IsolatedLauncher&gt;) () -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 下载 插件 jar 包</span></span><br><span class="line">        List&lt;File&gt; jarFiles = jarDownloader.download();</span><br><span class="line">        logger.debug(<span class="string">"Create isolated classloader..."</span>);</span><br><span class="line">        <span class="comment">// 创建自定义类加载器</span></span><br><span class="line">        cl = createClassLoader(jarFiles, rules);</span><br><span class="line">        <span class="comment">// 创建代理类</span></span><br><span class="line">        IsolatedLauncher objProxy = IsolatedLauncherProxy.create(cl, IsolatedLauncher<span class="class">.<span class="keyword">class</span>, <span class="title">launcherImplClassName</span>, <span class="title">logger</span>)</span>;</span><br><span class="line">        tempCleaning.clean();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> objProxy;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// Catch all other exceptions, which relates to reflection</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ScannerException(<span class="string">"Unable to execute SonarScanner analysis"</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>IsolatedLauncherProxy</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsolatedLauncherProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Object proxied;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader cl;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Logger logger;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">IsolatedLauncherProxy</span><span class="params">(ClassLoader cl, Object proxied, Logger logger)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cl = cl;</span><br><span class="line">    <span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">    <span class="keyword">this</span>.logger = logger;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(ClassLoader cl, Class&lt;T&gt; interfaceClass, String proxiedClassName, Logger logger)</span> <span class="keyword">throws</span> ReflectiveOperationException </span>&#123;</span><br><span class="line">    Object proxied = createProxiedObject(cl, proxiedClassName);</span><br><span class="line">    <span class="comment">// interfaceClass needs to be loaded with a parent ClassLoader (common to both ClassLoaders)</span></span><br><span class="line">    <span class="comment">// In addition, Proxy.newProxyInstance checks if the target ClassLoader sees the same class as the one given</span></span><br><span class="line">    Class&lt;?&gt; loadedInterfaceClass = cl.loadClass(interfaceClass.getName());</span><br><span class="line">    <span class="keyword">return</span> (T) create(cl, proxied, loadedInterfaceClass, logger);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(ClassLoader cl, Object proxied, Class&lt;T&gt; interfaceClass, Logger logger)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt;[] c = &#123;interfaceClass&#125;;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(cl, c, <span class="keyword">new</span> IsolatedLauncherProxy(cl, proxied, logger));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    ClassLoader initialContextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 设置类加载器</span></span><br><span class="line">      Thread.currentThread().setContextClassLoader(cl);</span><br><span class="line">      logger.debug(<span class="string">"Execution "</span> + method.getName());</span><br><span class="line">      <span class="keyword">return</span> method.invoke(proxied, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UndeclaredThrowableException | InvocationTargetException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> unwrapException(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 还原类加载器</span></span><br><span class="line">      Thread.currentThread().setContextClassLoader(initialContextClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Throwable <span class="title">unwrapException</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">    Throwable cause = e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cause.getCause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> UndeclaredThrowableException || cause <span class="keyword">instanceof</span> InvocationTargetException) &#123;</span><br><span class="line">        cause = cause.getCause();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cause;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">createProxiedObject</span><span class="params">(ClassLoader cl, String proxiedClassName)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">    Class&lt;?&gt; proxiedClass = cl.loadClass(proxiedClassName);</span><br><span class="line">    <span class="keyword">return</span> proxiedClass.newInstance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IsolatedLauncherProxy</code> 是用了JDK的动态代理，通过传入的 ClassLoader ，接口，被代理类的名称 <code>org.sonarsource.scanner.api.internal.batch.BatchIsolatedLauncher</code> ，最后生成 <code>BatchIsolatedLauncher</code> 的实例，然后 <code>BatchIsolatedLauncher</code> 调用了 SonarScannerEngine 的 <code>Batch</code> 类，完成扫描。</p><p><code>JarDownloader</code>主要是去下载 Jar 包，下载之前优先去本地检查 jar 包的缓存。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;File&gt; <span class="title">download</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;File&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    logger.debug(<span class="string">"Extract sonar-scanner-api-batch in temp..."</span>);</span><br><span class="line">    files.add(jarExtractor.extractToTemp(<span class="string">"sonar-scanner-api-batch"</span>).toFile());</span><br><span class="line">    files.addAll(getScannerEngineFiles());</span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;File&gt; <span class="title">getScannerEngineFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Collection&lt;JarEntry&gt; index = bootstrapIndexDownloader.getIndex();</span><br><span class="line">    <span class="keyword">return</span> index.stream()</span><br><span class="line">      .map(jar -&gt; fileCache.get(jar.getFilename(), jar.getHash(), scannerFileDownloader))</span><br><span class="line">      .collect(Collectors.toList());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function">Collection&lt;JarEntry&gt; <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String index;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      logger.debug(<span class="string">"Get bootstrap index..."</span>);</span><br><span class="line">      <span class="comment">// 从链接获取文件名和hash</span></span><br><span class="line">      index = conn.downloadString(<span class="string">"/batch/index"</span>);</span><br><span class="line">      logger.debug(<span class="string">"Get bootstrap completed"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get bootstrap index from server"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parse(index);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Collection&lt;JarEntry&gt; <span class="title">parse</span><span class="params">(String index)</span> </span>&#123;</span><br><span class="line">    Collection&lt;JarEntry&gt; entries = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    String[] lines = index.split(<span class="string">"[\\r\\n]+"</span>);</span><br><span class="line">    <span class="keyword">for</span> (String line : lines) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        line = line.trim();</span><br><span class="line">        String[] libAndHash = line.split(<span class="string">"\\\\|"</span>);</span><br><span class="line">        String filename = libAndHash[<span class="number">0</span>];</span><br><span class="line">        String hash = libAndHash[<span class="number">1</span>];</span><br><span class="line">        entries.add(<span class="keyword">new</span> JarEntry(filename, hash));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to parse entry in bootstrap index: "</span> + line);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> entries;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JarEntry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String filename;</span><br><span class="line">    <span class="keyword">private</span> String hash;</span><br><span class="line"></span><br><span class="line">    JarEntry(String filename, String hash) &#123;</span><br><span class="line">      <span class="keyword">this</span>.filename = filename;</span><br><span class="line">      <span class="keyword">this</span>.hash = hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFilename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在 BootstrapIndexDownloader 类中，先去获取最新的插件版本 <code>getIndex()</code>，地址为 <code>[/batch/index](&lt;http://sonarqubeurl//batch/index&gt;)</code> ，以我的 SonarQube 为例，返回的是 <code>sonar-scanner-engine-shaded-7.9.4-all.jar|6daf938ede67767970bafc194078293b</code> 接着调用 <code>parse()</code> 方法进行解析，前者是文件名，后者是 hash 数值，一般应该为 md5 。</p><p>如果本地之前没有下载过，则跳转到 <code>/batch/file?name=${filename}</code> 地址去下载。</p><p>解压 jar 包的内容，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">META-INF              com                   freemarker            linux                 okhttp3               org                   sq-version.txt</span><br><span class="line">ch                    darwin                google                net                   okio                  sonar-api-version.txt win32</span><br></pre></td></tr></table></figure><p>Jar包文件的内容主要有两部分，一部分是 .class 文件，是用来执行扫描和跟服务器进行数据传输的，一部分是  proto 文件，说明scanner和服务端通信是用了 <code>protobuffer</code> 协议。</p><p>接着使用到了Java的类加载器机制，将刚刚下载到的 Jar 包装到类加载器中去加载，自定义了一个类加载器 <code>IsolatedClassloader</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Special &#123;<span class="doctag">@link</span> java.net.URLClassLoader&#125; to execute batch, which restricts loading from parent.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsolatedClassloader</span> <span class="keyword">extends</span> <span class="title">URLClassLoader</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ClassloadRules rules;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The parent classloader is used only for loading classes and resources in unmasked packages</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  IsolatedClassloader(ClassLoader parent, ClassloadRules rules) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="keyword">new</span> URL[<span class="number">0</span>], parent);</span><br><span class="line">    <span class="keyword">this</span>.rules = rules;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addFiles</span><span class="params">(List&lt;File&gt; files)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        addURL(file.toURI().toURL());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to create classloader"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Same behavior as in &#123;<span class="doctag">@link</span> java.net.URLClassLoader#loadClass(String, boolean)&#125;, except loading from parent.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">    Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Load from parent</span></span><br><span class="line">        <span class="keyword">if</span> (getParent() != <span class="keyword">null</span> &amp;&amp; rules.canLoad(name)) &#123;</span><br><span class="line">          c = getParent().loadClass(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Load from system</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// I don't know for other vendors, but for Oracle JVM :</span></span><br><span class="line">          <span class="comment">// - ClassLoader.getSystemClassLoader() is sun.misc.Launcher$AppClassLoader. It contains app classpath.</span></span><br><span class="line">          <span class="comment">// - ClassLoader.getSystemClassLoader().getParent() is sun.misc.Launcher$ExtClassLoader. It contains core JVM</span></span><br><span class="line">          ClassLoader systemClassLoader = getSystemClassLoader();</span><br><span class="line">          <span class="keyword">if</span> (systemClassLoader.getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            systemClassLoader = systemClassLoader.getParent();</span><br><span class="line">          &#125;</span><br><span class="line">          c = systemClassLoader.loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">        <span class="comment">// to find the class.</span></span><br><span class="line">        c = findClass(name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">      resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>看一下 <code>IsolatedClassloader</code> 发现它继承了<code>URLClassLoader</code></p><p>在常规加载器的内容上，判断了该类是否允许被加载<code>rules.canLoad</code>，不过查看源码，并没有地方被调用。</p><p>接着使用 JDK 动态代理技术，创建 <code>org.sonarsource.scanner.api.internal.batch.BatchIsolatedLauncher</code> 的代理类并返回，到这里，start 方法的流程结束了</p><h3 id="execute-1"><a href="#execute-1" class="headerlink" title="execute()"></a>execute()</h3><p>最后回到 Main 类的 execute方法，调用了 <code>EmbeddedScanner</code> 的 <code>execute</code> 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">(Map&lt;String, String&gt; properties)</span> </span>&#123;</span><br><span class="line">    launcher.execute(properties, (formattedMessage, level) -&gt; logOutput.log(formattedMessage, LogOutput.Level.valueOf(level.name())));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里边只做了一件事就是调用 <code>IsolatedLauncher</code> 的 <code>execute</code> 方法，通过查看源码可以知道这是个接口.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IsolatedLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Map&lt;String, String&gt; var1, LogOutput var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getVersion</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且，该源码内继承该接口的类只有一个，就是刚刚的 模拟类 <code>SimulatedLauncher</code> ，通过刚刚的源码可以知道这个类只是用来测试或者模拟用的，并不是真正的执行类，那真正的执行代码在哪？</p><p>查看代码之后发现在 <code>org/sonarsource/scanner/api/internal/batch/BatchIsolatedLauncher.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Map&lt;String, String&gt; properties, org.sonarsource.scanner.api.internal.batch.LogOutput logOutput)</span> </span>&#123;</span><br><span class="line">    factory.createBatch(properties, logOutput).execute();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultBatchFactory</span> <span class="keyword">implements</span> <span class="title">BatchFactory</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCANNER_APP_KEY = <span class="string">"sonar.scanner.app"</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCANNER_APP_VERSION_KEY = <span class="string">"sonar.scanner.appVersion"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Batch <span class="title">createBatch</span><span class="params">(Map&lt;String, String&gt; properties, <span class="keyword">final</span> org.sonarsource.scanner.api.internal.batch.LogOutput logOutput)</span> </span>&#123;</span><br><span class="line">    EnvironmentInformation env = <span class="keyword">new</span> EnvironmentInformation(properties.get(SCANNER_APP_KEY), properties.get(SCANNER_APP_VERSION_KEY));</span><br><span class="line">    <span class="keyword">return</span> Batch.builder()</span><br><span class="line">      .setEnvironment(env)</span><br><span class="line">      .setGlobalProperties(properties)</span><br><span class="line">      .setLogOutput((formattedMessage, level) -&gt; logOutput.log(formattedMessage, LogOutput.Level.valueOf(level.name())))</span><br><span class="line">      .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BatchIsolatedLauncher</code> 的 <code>execute</code> 方法内，先用工厂类创建了一个 <code>Batch</code> 对象，设置参数等信息，然后执行 Batch 的 execute 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Batch <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    configureLogging();</span><br><span class="line">    doStart();</span><br><span class="line">    <span class="keyword">boolean</span> threw = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      doExecuteTask(globalProperties);</span><br><span class="line">      threw = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      doStop(threw);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>到这里就开始真正的代码扫描的任务执行了，会进入到下一个模块，<code>sonar-scanner-engine</code></p><p>该代码位于 <code>SonarQube</code> 源码仓库下边的 <code>sonar-scanner-engine</code> 模块。</p><p><a href="https://github.com/SonarSource/sonarqube/tree/master/sonar-scanner-engine" target="_blank" rel="noopener">https://github.com/SonarSource/sonarqube/tree/master/sonar-scanner-engine</a></p><p>后续再单独针对这块代码的分析。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>SonarScanner 设计的很巧妙，安装 SonarScanner 只需要一个jar 包，大小500KB左右，分析代码需要的插件代码会自动从 SonarQube 的服务器下载，使用自定义的ClassLoader来加载从服务器上下载的jar包，然后使用这个启动器类调用了 SonarScannerEngine 的 Batch 启动并执行代码扫描。这种方式对于客户端(Scanner)来说不需要维护和更新插件，插件的更新在服务端就可以完成，减少了分发更新的成本。</p><p>参考：</p><p><a href="https://www.jianshu.com/p/c22213591f47" target="_blank" rel="noopener">sonarqube+sonar-scanner-engine扫描引擎主要执行步骤</a></p><p><a href="https://blog.csdn.net/lxlmycsdnfree/article/details/80283697" target="_blank" rel="noopener">Sonar 质量扫描的输出日志–对应源码的跟踪（一）{源码解析sonar-scanner-maven3.2}</a></p><p><a href="https://www.cnblogs.com/jiaoyiping/p/9691620.html" target="_blank" rel="noopener">sonar-scanner的执行流程和对ClassLoader,动态代理的使用 - 梦中彩虹 - 博客园</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍：&quot;&gt;&lt;a href=&quot;#介绍：&quot; class=&quot;headerlink&quot; title=&quot;介绍：&quot;&gt;&lt;/a&gt;介绍：&lt;/h2&gt;&lt;p&gt;SonarQube是一个静态代码扫描平台，支持主流语言的静态代码扫描分析。&lt;/p&gt;
&lt;p&gt;SonarQube主要分为几个模块：Web
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java 并发</title>
    <link href="https://magaofei.github.io/2019/07/04/57.%20concurrent/"/>
    <id>https://magaofei.github.io/2019/07/04/57. concurrent/</id>
    <published>2019-07-04T19:00:00.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><p>悲观锁，排它锁</p><h5 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h5><h5 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h5><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h4><p>无锁</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;锁&quot;&gt;&lt;a href=&quot;#锁&quot; class=&quot;headerlink&quot; title=&quot;锁&quot;&gt;&lt;/a&gt;锁&lt;/h2&gt;&lt;h4 id=&quot;ReentrantLock&quot;&gt;&lt;a href=&quot;#ReentrantLock&quot; class=&quot;headerlink&quot; title=&quot;Ree
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jvm 调优</title>
    <link href="https://magaofei.github.io/2019/07/03/56.%20jvm/"/>
    <id>https://magaofei.github.io/2019/07/03/56. jvm/</id>
    <published>2019-07-03T21:55:22.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>频繁的 minorGC ，我们可以调大 新生代的大小</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xmn1g</span><br></pre></td></tr></table></figure></li><li><p>打印 gc 日志，根据日志时间查看调用代码</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;频繁的 minorGC ，我们可以调大 新生代的大小&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-Xmn1g&lt;/span&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="https://magaofei.github.io/2019/07/03/55.%20Spring/"/>
    <id>https://magaofei.github.io/2019/07/03/55. Spring/</id>
    <published>2019-07-03T21:12:22.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DispatcherServler"><a href="#DispatcherServler" class="headerlink" title="DispatcherServler"></a>DispatcherServler</h2><ol><li><code>(DispatcherServlet)FrameworkServler.doService()</code></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DispatcherServler&quot;&gt;&lt;a href=&quot;#DispatcherServler&quot; class=&quot;headerlink&quot; title=&quot;DispatcherServler&quot;&gt;&lt;/a&gt;DispatcherServler&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端跨域处理</title>
    <link href="https://magaofei.github.io/2019/06/21/54.%20%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/"/>
    <id>https://magaofei.github.io/2019/06/21/54. 前端跨域处理/</id>
    <published>2019-06-21T16:21:22.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<p>跨域是一个安全的设计，跨域会在浏览器端被拦截掉，所以，一定要前端进行处理，后端不需要做规避操作。</p><p>前端怎么处理，本次介绍一个最通用的方法。</p><p>如果你使用的是 <a href="https://cli.vuejs.org/" target="_blank" rel="noopener">vue-cli</a> 脚手架，只需要两个步骤</p><ol><li>在 <code>vue.config.js</code> 文件中添加以下代码</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'目标网址'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在请求 API 的地方去掉 域名 或 IP ，只保留网址后缀(踩过的坑)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跨域是一个安全的设计，跨域会在浏览器端被拦截掉，所以，一定要前端进行处理，后端不需要做规避操作。&lt;/p&gt;
&lt;p&gt;前端怎么处理，本次介绍一个最通用的方法。&lt;/p&gt;
&lt;p&gt;如果你使用的是 &lt;a href=&quot;https://cli.vuejs.org/&quot; target=&quot;_bla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ELK 搭建</title>
    <link href="https://magaofei.github.io/2019/06/21/53.%20ELK%20%E6%90%AD%E5%BB%BA/"/>
    <id>https://magaofei.github.io/2019/06/21/53. ELK 搭建/</id>
    <published>2019-06-21T15:21:22.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<p>ELK 搭建</p><p>ELK是 ES + Logstash + Kibana，是管理日志的集合工具，本次教程还需要加上 filebeat 。</p><p>Docker 安装：7.0.1 <a href="https://github.com/magaofei/docker-elk" target="_blank" rel="noopener">ELK For docker</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ELK 搭建&lt;/p&gt;
&lt;p&gt;ELK是 ES + Logstash + Kibana，是管理日志的集合工具，本次教程还需要加上 filebeat 。&lt;/p&gt;
&lt;p&gt;Docker 安装：7.0.1 &lt;a href=&quot;https://github.com/magaofei/doc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Appium installation and configuration under macOS</title>
    <link href="https://magaofei.github.io/2018/08/22/51.%20Appium%20installation%20and%20configuration%20under%20macOS/"/>
    <id>https://magaofei.github.io/2018/08/22/51. Appium installation and configuration under macOS/</id>
    <published>2018-08-22T09:57:22.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>System requirements and instructions:</p><ul><li>macOS 10.11 or higher</li><li><code>brew</code>need the latest version of <code>Xcode</code> or <code>Xcode Command Line</code></li></ul><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>iOS 9.3 and below use Automation as the underlying technology, XCUITest appears in iOS 9.3, and Automation is abandoned in iOS 10, so Appium is configured differently in iOS 9.3 and below than iOS 10.</p><h3 id="Appium-Installation"><a href="#Appium-Installation" class="headerlink" title="Appium Installation"></a>Appium Installation</h3><p>If you have installed partial dependencies, you can skip it directly</p><h4 id="Homebrew-Installation"><a href="#Homebrew-Installation" class="headerlink" title="Homebrew Installation"></a>Homebrew Installation</h4><p>It is highly recommended that all software on macOS be installed using Homebrew. Using the software installed by brew, the sudo command is no longer needed.</p><p>Open terminal, copy and run：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure><p>The use of brew is very simple, install a software to use</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install #&lt;package name&gt;</span><br></pre></td></tr></table></figure><p>If the brew prompts that the Xcode version is too low, you need to install a new version of Xcode (you can save both versions when you install)</p><p>Download url：<a href="https://developer.apple.com/download/more/" target="_blank" rel="noopener">https://developer.apple.com/download/more/</a></p><h4 id="Nodejs-Installation"><a href="#Nodejs-Installation" class="headerlink" title="Nodejs Installation"></a>Nodejs Installation</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install node@8</span><br></pre></td></tr></table></figure><p>Check if the installation is successful</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"># v6.9.1</span><br><span class="line">npm -v</span><br><span class="line"># 3.10.8</span><br></pre></td></tr></table></figure><h4 id="Appium-Installation-1"><a href="#Appium-Installation-1" class="headerlink" title="Appium Installation"></a>Appium Installation</h4><p>Node.js usage</p><p>Appium is essentially a Nodejs application, we can use npm to install it, after the installation is complete, you can use the command line to start</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g appium</span><br></pre></td></tr></table></figure><p>You can use appium-doctor to confirm that the installation environment is complete.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g appium-doctor</span><br><span class="line">appium-doctor</span><br></pre></td></tr></table></figure><p>Download App<br>The software is relatively simple, has a graphical interface, and has an Inspector tool to help detect interface elements.<br>Download url: <a href="https://github.com/appium/appium-desktop/releases" target="_blank" rel="noopener">https://github.com/appium/appium-desktop/releases</a></p><h3 id="Appium-Settings"><a href="#Appium-Settings" class="headerlink" title="Appium Settings"></a>Appium Settings</h3><h4 id="Carthage-Installation"><a href="#Carthage-Installation" class="headerlink" title="Carthage Installation"></a>Carthage Installation</h4><p>Carthage is a package manager that manages iOS development library dependencies</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install carthage</span><br></pre></td></tr></table></figure><h4 id="Install-the-client-language"><a href="#Install-the-client-language" class="headerlink" title="Install the client language"></a>Install the client language</h4><p>Which language to use to install which language</p><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><p>Install Python 3 (skip with Python 2)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install python3</span><br></pre></td></tr></table></figure><p>Check successful installation</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -V</span><br><span class="line"># Python 3.6.0</span><br><span class="line">pip3 -V</span><br><span class="line"># pip 9.0.1 from &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.6&#x2F;site-packages (python 3.6)</span><br></pre></td></tr></table></figure><p>Success with the corresponding code</p><p>macOS comes with Python2 version. By default, python calls are the system’s python2 and pip (recommended to use virtual environment)</p><p>In addition, if the system version has been installed before python3 causes the python3 command not found after installation, you can try <code>brew link --overwrite python3</code> relink</p><p>Install using pip</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install Appium-Python-Client</span><br><span class="line"># python3 -&gt; pip3</span><br><span class="line"># python -&gt; pip</span><br></pre></td></tr></table></figure><p>More information：<a href="https://github.com/appium/python-client" target="_blank" rel="noopener">https://github.com/appium/python-client</a></p><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>JDK Installation</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew tap caskroom&#x2F;versions</span><br><span class="line">brew cask install java8</span><br></pre></td></tr></table></figure><p>Use Maven for dependencies</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.appium&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;java-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;6.1.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>More information：<a href="https://github.com/appium/java-client" target="_blank" rel="noopener">https://github.com/appium/java-client</a></p><h4 id="Installation-related-dependencies"><a href="#Installation-related-dependencies" class="headerlink" title="Installation related dependencies"></a>Installation related dependencies</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">idevicesyslog&#96; and port forwarding &#96;iProxy&#96;, &#96;usbmuxd</span><br><span class="line">brew install libimobiledevice --HEAD   #Communicate with iOS phones</span><br><span class="line">brew install ideviceinstaller   # Install app use</span><br></pre></td></tr></table></figure><p>Need to use on iOS10 or higher<code>ios-deploy</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g ios-deploy</span><br></pre></td></tr></table></figure><p>Need for real devices<code>xcpretty</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install xcpretty</span><br></pre></td></tr></table></figure><h4 id="First-run-configuration"><a href="#First-run-configuration" class="headerlink" title="First run configuration"></a>First run configuration</h4><p>No configuration will appear<code>xcodebuild exited with code &#39;65&#39; and signal &#39;null&#39;</code>error</p><p>If have Developer account:</p><p>AppiumDesktop add xcodeOrgId 和 xcodeSigningId fields</p><p><img src="https://cdn-images-1.medium.com/max/1600/0*rsRDh_up1A510vSb.png" alt="img"></p><p>TeamID is found in the Member ship on the left side of <a href="https://developer.apple.com/account/" target="_blank" rel="noopener">https://developer.apple.com/account/</a></p><p>Requires <code>xcodeOrgId</code> and <code>xcodeSigningId</code> written in desired capabilities</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      &quot;xcodeOrgId&quot;: &quot;&lt;Team ID&gt;&quot;,</span><br><span class="line">      &quot;xcodeSigningId&quot;: &quot;iPhone Developer&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>the free AppleID account</p><ol><li>Find the location of WebDriverAgent in appium’s error log, open for signature</li><li><code>[XCUITest] Using WDA path: &#39;/usr/local/lib/node_modules/appium/node_modules/.2.23.1@appium-xcuitest-driver/WebDriverAgent&#39;</code></li><li>Change the <code>BundleID</code> of <code>WebDriverAgent</code>, which is <code>com.facebook.WebDriverAgentLib</code>. I suggest changing <code>facebook</code> to your name or company name. There is also a pit here. After changing this, I found that there is an error, and in <code>Build Settings</code>. Modify it in the <code>Product Bundle Identifier</code>.</li></ol><ol><li>Click Product -&gt; Test in the menu bar above.<br>The first run will prompt no permission, open the settings app on the real machine, general -&gt; description file and device management, find your mailbox, select trust, and then continue to execute test, after successful startup, it can be explained, click after execution stop.</li><li>End, open the Appium test.</li></ol><h4 id="View-interface-elements"><a href="#View-interface-elements" class="headerlink" title="View interface elements"></a>View interface elements</h4><ul><li>use WebDriverAgent</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Clone from https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;WebDriverAgent, execute the .&#x2F;Scripts&#x2F;bootstrap.sh command, and open the project to sign it.</span><br><span class="line">Implementation modalities</span><br><span class="line">- Then click on Product --&gt; test in the menu bar above.</span><br><span class="line">- xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination id&#x3D;&#39;udid&#39; test</span><br><span class="line"># udid can be obtained with the command idevice_id -l</span><br></pre></td></tr></table></figure><p>use AppiumDesktop</p><p>app-inspector usage</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># macaca-cli</span><br><span class="line">npm install macaca-cli -g</span><br><span class="line"># macaca doctor</span><br><span class="line">macaca doctor</span><br><span class="line"># app-inspector</span><br><span class="line">npm install app-inspector -g</span><br><span class="line"># usage</span><br><span class="line">app-inspector -u &#39;udid&#39;</span><br></pre></td></tr></table></figure><h4 id="253-error-code"><a href="#253-error-code" class="headerlink" title="253 error code"></a>253 error code</h4><p>If you run the official TestApp example, you may get a 253 error, then you need to rebuild the test app (requires source code)</p><p>xcodebuild command</p><p>project</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xcodebuild [-project projectname] [-target targetname ...] [-configuration configurationname]</span><br><span class="line">            [-sdk [sdkfullpath | sdkname]] [buildaction ...] [setting&#x3D;value ...]</span><br><span class="line">            [-userdefault&#x3D;value ...]</span><br></pre></td></tr></table></figure><p>workspace</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xcodebuild -workspace workspacename -scheme schemename [-destination destinationspecifier]</span><br><span class="line">            [-destination-timeout value] [-configuration configurationname]</span><br><span class="line">            [-sdk [sdkfullpath | sdkname]] [buildaction ...] [setting&#x3D;value ...]</span><br><span class="line">            [-userdefault&#x3D;value ...]</span><br></pre></td></tr></table></figure><p>For example</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># xcodebuild -project RobotCalibration.xcodeproj -target RobotCalibration -sdk iphoneos -configuration development</span><br></pre></td></tr></table></figure><h4 id="DesiredCapabilities-Configuration-information"><a href="#DesiredCapabilities-Configuration-information" class="headerlink" title="DesiredCapabilities Configuration information"></a>DesiredCapabilities Configuration information</h4><ul><li>determine <code>**platformVersion**</code></li><li>determine <code>**bundleId**</code></li><li>If there is only one device, <code>udid</code> can be set to <code>auto</code></li><li>You can also raise the <code>app</code> without providing the app attribute, but you need to set the <code>bundleId</code></li><li>When testing iOS 9.3 or lower, you need to set <code>automationName</code> to <code>Automation</code> and others to <code>XCUITest</code>.</li></ul><h4 id="Common-command"><a href="#Common-command" class="headerlink" title="Common command"></a>Common command</h4><p>Switch Xcode</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo xcode-select -s #path &#x2F;Applications&#x2F;Xcode.app&#x2F;</span><br></pre></td></tr></table></figure><p>view devices udid</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">idevice_id -l</span><br><span class="line"># Or use ideviceinfo to find udid in the returned data.</span><br></pre></td></tr></table></figure><h3 id="Automation-（iOS-10-or-lower）"><a href="#Automation-（iOS-10-or-lower）" class="headerlink" title="Automation （iOS 10 or lower）"></a>Automation （iOS 10 or lower）</h3><p>Recommended Use:</p><p>Xcode7.3.1</p><p>note:</p><p>In iOS8, you need to make sure UIAutomation in the developer options in the settings is open.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Have a developer account — &gt; Open Xcode — &gt; Register for device</span><br><span class="line">Free account ─&gt; open project —&gt; modify bundleID —&gt; login account to sign</span><br></pre></td></tr></table></figure><p>Check if the set App directory is correct before testing.</p><p>Then you can open Appium, and test cases.</p><p>If you do not involve automatic installation and uninstallation of the app, you can manually install the app to the target device before testing.</p><p>Prerequisites require <code>ideviceinstaller</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ideviceinstaller -u &lt;UDID of device&gt; -i &lt;path of .app&#x2F;.ipa&gt;</span><br></pre></td></tr></table></figure><p>Instruments exited with code: 253</p><p>[Instruments] Error launching instruments: Instruments crashed on startup</p><p>May be the App path is incorrect</p><h4 id="Authorized-iOS-Simulator"><a href="#Authorized-iOS-Simulator" class="headerlink" title="Authorized iOS Simulator"></a>Authorized iOS Simulator</h4><p>Need to test the simulator for this, install with npm</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g authorize-ios</span><br></pre></td></tr></table></figure><p>Run after installation</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo authorize-ios</span><br></pre></td></tr></table></figure><p>Note: you need to execute again after installing the new Xcode</p><h4 id="Run-iOS-test-with-Jenkins-not-tested"><a href="#Run-iOS-test-with-Jenkins-not-tested" class="headerlink" title="Run iOS test with Jenkins (not tested)"></a>Run iOS test with Jenkins (not tested)</h4><p>Confirm that <code>authorize-ios</code> runs successfully before</p><p>download Jenkins</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;jenkins.ci.cloudbees.com&#x2F;jnlpJars&#x2F;jenkins-cli.jar</span><br></pre></td></tr></table></figure><p>Next define a Jenkins LaunchAgent to log in automatically, make sure it doesn’t include <code>SessionCreate</code> or <code>User</code>key key to prevent the test from running.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar \</span><br><span class="line"> -s https:&#x2F;&#x2F;team-appium.ci.cloudbees.com \</span><br><span class="line"> -i ~&#x2F;.ssh&#x2F;id_rsa \</span><br><span class="line"> on-premise-executor \</span><br><span class="line"> -fsroot ~&#x2F;jenkins \</span><br><span class="line"> -labels osx \</span><br><span class="line"> -name mac_appium</span><br></pre></td></tr></table></figure><p>Finally set and start</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nano &#x2F;Library&#x2F;LaunchAgents&#x2F;com.jenkins.ci.plist</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-&#x2F;&#x2F;Apple&#x2F;&#x2F;DTD PLIST 1.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.apple.com&#x2F;DTDs&#x2F;PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version&#x3D;&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">    &lt;key&gt;Label&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;com.jenkins.ci&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;ProgramArguments&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;array&gt;</span><br><span class="line">        &lt;string&gt;java&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;-Djava.awt.headless&#x3D;true&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;-jar&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;&#x2F;Users&#x2F;appium&#x2F;jenkins&#x2F;jenkins-cli.jar&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;-s&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;https:&#x2F;&#x2F;instructure.ci.cloudbees.com&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;on-premise-executor&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;-fsroot&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;&#x2F;Users&#x2F;appium&#x2F;jenkins&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;-executors&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;1&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;-labels&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;mac&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;-name&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;mac_appium&lt;&#x2F;string&gt;</span><br><span class="line">        &lt;string&gt;-persistent&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;&#x2F;array&gt;</span><br><span class="line">    &lt;key&gt;KeepAlive&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;true&#x2F;&gt;</span><br><span class="line">    &lt;key&gt;StandardOutPath&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;&#x2F;Users&#x2F;appium&#x2F;jenkins&#x2F;stdout.log&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;key&gt;StandardErrorPath&lt;&#x2F;key&gt;</span><br><span class="line">    &lt;string&gt;&#x2F;Users&#x2F;appium&#x2F;jenkins&#x2F;error.log&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;dict&gt;</span><br><span class="line">&lt;&#x2F;plist&gt;</span><br></pre></td></tr></table></figure><p>Finally set the owner, permissions, and then start the agent.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chown root:wheel &#x2F;Library&#x2F;LaunchAgents&#x2F;com.jenkins.ci.plist</span><br><span class="line">sudo chmod 644 &#x2F;Library&#x2F;LaunchAgents&#x2F;com.jenkins.ci.plist</span><br><span class="line">launchctl load &#x2F;Library&#x2F;LaunchAgents&#x2F;com.jenkins.ci.plist</span><br><span class="line">launchctl start com.jenkins.ci</span><br></pre></td></tr></table></figure><h4 id="Clean-up-files-optional"><a href="#Clean-up-files-optional" class="headerlink" title="Clean up files (optional)"></a>Clean up files (optional)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$HOME&#x2F;Library&#x2F;Logs&#x2F;CoreSimulator&#x2F;</span><br><span class="line">&#x2F;Library&#x2F;Caches&#x2F;com.apple.dt.instruments&#x2F;</span><br><span class="line">$HOME&#x2F;Library&#x2F;Developer&#x2F;Xcode&#x2F;DerivedData&#x2F;</span><br></pre></td></tr></table></figure><p>All files in the above directory</p><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h4 id="maven-Installation"><a href="#maven-Installation" class="headerlink" title="maven Installation"></a>maven Installation</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install maven</span><br></pre></td></tr></table></figure><h4 id="More-settings"><a href="#More-settings" class="headerlink" title="More settings"></a>More settings</h4><ol><li>download JDK</li><li>Download the Android SDK via Android Studio and set up the directory</li></ol><p>macOS sets up the JavaHome and Android SDK directories and places the following code in <code>.bashrc</code> or <code>.zshrc</code> in the user directory</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># the path of use Android Studio installation after </span><br><span class="line"># android sdk</span><br><span class="line">export ANDROID_HOME&#x3D;~&#x2F;Library&#x2F;Android&#x2F;sdk</span><br><span class="line">export PATH&#x3D;&quot;$HOME&#x2F;.yarn&#x2F;bin:$PATH&quot;</span><br><span class="line"># java_home</span><br><span class="line">export JAVA_HOME&#x3D;$(&#x2F;usr&#x2F;libexec&#x2F;java_home)</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line">export CLASS_PATH&#x3D;$JAVA_HOME&#x2F;lib</span><br><span class="line"># adb...</span><br><span class="line">export PATH&#x3D;$&#123;PATH&#125;:$ANDROID_HOME&#x2F;tools:$ANDROID_HOME&#x2F;platform-tools</span><br><span class="line">export PATH&#x3D;$&#123;PATH&#125;:$ANDROID_HOME&#x2F;tools&#x2F;bin</span><br></pre></td></tr></table></figure><p>At latest，You can use appium-doctor to check the configuration environment</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appium-doctor</span><br></pre></td></tr></table></figure><p>Write clearly in capabilities</p><ul><li><code>platformVersion</code></li><li><code>appPackage</code></li><li><code>appActivity</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS&quot;&gt;&lt;a href=&quot;#iOS&quot; class=&quot;headerlink&quot; title=&quot;iOS&quot;&gt;&lt;/a&gt;iOS&lt;/h3&gt;&lt;p&gt;System requirements and instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS 10.11 or 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MobSF源码分析</title>
    <link href="https://magaofei.github.io/2018/08/17/50.%20MobSF%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://magaofei.github.io/2018/08/17/50. MobSF 源码分析/</id>
    <published>2018-08-17T11:08:13.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MobSF(Mobile-Security-Framework-MobSF)，是一个基于 Django 的移动端安全扫描应用。GitHub 地址：<a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF" target="_blank" rel="noopener">https://github.com/MobSF/Mobile-Security-Framework-MobSF</a></p><p>下边打算简单分析一下源码</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── DynamicAnalyzer #动态扫描 app</span><br><span class="line">│   ├── tools  # 运行平台对应的 adb 工具和工具包等</span><br><span class="line">│   └── views  # 功能函数</span><br><span class="line">├── LICENSES </span><br><span class="line">├── MalwareAnalyzer  # 恶意软件扫描</span><br><span class="line">├── MobSF   # 项目项目，设置等文件</span><br><span class="line">│   ├── forms.py      # 上传文件接口表单</span><br><span class="line">│   ├── kali_fix.sh</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── rest_api.py   # 对外 RESTAPI</span><br><span class="line">│   ├── settings.py   # 配置文件</span><br><span class="line">│   ├── urls.py       # URL 路由函数</span><br><span class="line">│   ├── utils.py      # 通用的一些功能，比如寻找 Java，检查更新，获取 apiKey 等</span><br><span class="line">│   ├── views.py      # 视图函数</span><br><span class="line">│   └── wsgi.py </span><br><span class="line">├── StaticAnalyzer</span><br><span class="line">│   ├── models.py   # ORM</span><br><span class="line">│   ├── tests.py    # 单元测试</span><br><span class="line">│   ├── migrations  # SQL 脚本</span><br><span class="line">│   ├── test_files  # 测试文件</span><br><span class="line">│   ├── tools       # 用到的工具包</span><br><span class="line">│   └── views       # 功能实现函数</span><br><span class="line">├── downloads</span><br><span class="line">│   ├── 3857ea931f051b319b558488518e7c16-screenshots-apk # 动态扫描产生的截图等</span><br><span class="line">├── install  </span><br><span class="line">│   └── windows  # 扫描 Windows appx </span><br><span class="line">├── logs         # 日志</span><br><span class="line">│   └── certs</span><br><span class="line">├── scripts      # shell 脚本</span><br><span class="line">│   └── cloud</span><br><span class="line">├── static       # CSS JS 文件</span><br><span class="line">│   ├── bootstrap</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── dash</span><br><span class="line">│   ├── fonts</span><br><span class="line">│   ├── img</span><br><span class="line">│   ├── js</span><br><span class="line">│   └── plugins</span><br><span class="line">├── templates  # HTML 文件</span><br><span class="line">│   ├── dynamic_analysis</span><br><span class="line">│   ├── general</span><br><span class="line">│   ├── pdf</span><br><span class="line">│   └── static_analysis</span><br><span class="line">└── uploads</span><br><span class="line">    ├── 2ff4f3be34ff3b8763671b77790da91e #上传的文件</span><br></pre></td></tr></table></figure><p>由此可见，源代码当中，需要关注的是 <code>MobSF</code> 、<code>StaticAnalyzer</code> 、<code>DynamicAnalyzer</code> ，而里边 <code>MobSF</code>主要是 Django 的一些设置和 API ，动态分析用的不多，所以最重要的还是 <code>StaticAnalyzer</code> 这个 App 需要重点去关注。</p><h3 id="Django-部分"><a href="#Django-部分" class="headerlink" title="Django 部分"></a>Django 部分</h3><p>刚开始部署的时候我发现很奇怪的一个地方，这个项目居然在源码中保留了 static 文件夹，一般 Django 项目到发布的时候才会生成这个文件夹，如果放到源代码管理中，势必要增大项目的体积。</p><p>还有一点就是 Log 打印的并不友好，代码中出现了大量的 <code>print</code> 语句，而不是 log 模块。</p><p>还有在 <code>rest_api</code> 的处理也可以看出，写的非常随意，表单效验没有，通篇的 IF_ELSE ，让人看了难受。知道作者是印度人后，我就知道了什么，我打算提交一些 <code>Pull Request</code> ，如果允许的话，我是愿意帮忙改改的。</p><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><p>数据库部分只有<code>StaticAnalyzer</code>部分用到，同样，这一部分也是最常用的功能</p><h3 id="扫描部分"><a href="#扫描部分" class="headerlink" title="扫描部分"></a>扫描部分</h3><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>在对样本进行静态分析时，MobSF主要使用了现有的dex2jar、dex2smali、jar2java、AXMLPrinter、CertPrint等工具。其主要完成了两项工作： 解析AndroidManifest.xml得到了应用程序的各类相关信息、 对apk进行反编译得到java代码，而后利用正则匹配找出该样本主要进行了哪些工作。    </p><h4 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h4><p>仅限于 Android，动态分析在真机运行需要 WiFiADB，速度慢，效果不理想</p><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>而在对样本进行动态分析时，MobSF主要利用到了Xposed框架、Droidmon实现对应用程序调用API的情况进行监控，并且可灵活维护一份需要hook的API列表。同时，MobSF还使用了DataPusher来对样本数据进行打包、使用了ScreenCast结合adb shell input完成对手机的远程控制功能。当然，其中还使用隐藏root权限、伪造成正式机器等技术来应对一些反虚拟机的程序。其主要做了一下几件事： </p><p>1、利用webproxy实现代理进而拦截样本流量。 </p><p>2、安装证书以便拦截https流量。 </p><p>3、遍历所有activity，尽量多的获取各activity运行得到的日志。</p><p> 4、利用正则匹配出API及参数和返回值。</p><p>5、实时更新恶意url库，以url信息特征进行查杀。 </p><h4 id="URLS"><a href="#URLS" class="headerlink" title="URLS"></a>URLS</h4><p>四部分</p><ul><li><code>MobSF.views</code> 里边主要是HTML页面</li><li><code>StaticAnalyzer.views</code> Android 静态分析</li><li><code>DynamicAnalyzer.views</code> Android 动态分析</li><li><code>MobSF.rest_api</code> 对外的REST API (其实根本不 REST)</li></ul><h4 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h4><p><code>MobSF.views</code>这里边主要是一些 HTML 页面和部分功能(upload/delete)</p><p><code>StaticAnalyzer.views</code> 静态扫描的功能函数</p><h4 id="StaticAnalyzer"><a href="#StaticAnalyzer" class="headerlink" title="StaticAnalyzer"></a>StaticAnalyzer</h4><h5 id="ORM-1"><a href="#ORM-1" class="headerlink" title="ORM"></a>ORM</h5><p>数据库写的很简单</p><ul><li>RecentScansDB</li><li>StaticAnalyzerAndroid</li><li>StaticAnalyzerIPA</li><li>StaticAnalyzerIOSZIP</li><li>StaticAnalyzerWindows</li></ul><p>可以看出来，首先扫描之后会往 <code>RecentScansDB</code>写入数据，然后根据不同的文件往不同的库里写详细数据，两者是用MD5值来判断指定文件。</p><h4 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h4><h5 id="扫描-API-的实现"><a href="#扫描-API-的实现" class="headerlink" title="扫描 API 的实现"></a>扫描 API 的实现</h5><ol><li><code>MobSF.rest_api.api_scan()</code></li><li><code>StaticAnalyzer.views.android.static_analyzer()</code></li></ol><p>在<code>static_analyzer()</code> 函数里边可以看到一些数据的获取，基本上是用字典来存取各类信息，这个信息由一个响应的的功能函数得到，而这个功能函数，你点进去看，会发现是执行的 Shell，在 Shell 输出的时候，会有一些正则等匹配方式，去拿到想要的数值，然后返回。最后程序写入库中。</p><h4 id="Android-静态扫描"><a href="#Android-静态扫描" class="headerlink" title="Android 静态扫描"></a>Android 静态扫描</h4><p>未完待续</p><h4 id="iOS-静态扫描"><a href="#iOS-静态扫描" class="headerlink" title="iOS 静态扫描"></a>iOS 静态扫描</h4><p>未完待续</p><h5 id="其他-API"><a href="#其他-API" class="headerlink" title="其他 API"></a>其他 API</h5><p>在<code>StaticAnalyzer.views</code> 里需要先重点看一下 <code>shared_func.py</code> 文件</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. http:&#x2F;&#x2F;purpleroc.com&#x2F;MD&#x2F;2016-08-31@Android%20Malware%20Analysis%20Tool(1)--MobSF.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;MobSF(Mobile-Security-Framework-MobSF)，是一个基于 Django 的移动端安全扫描应用。GitHub 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fabric2的使用</title>
    <link href="https://magaofei.github.io/2018/06/15/49.%20fabric2%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://magaofei.github.io/2018/06/15/49. fabric2的使用/</id>
    <published>2018-06-15T22:40:00.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fabric2-的使用"><a href="#fabric2-的使用" class="headerlink" title="fabric2 的使用"></a>fabric2 的使用</h1><p>找了一圈，居然没有发现介绍 fabric 2 的，众所周知，fabric 2 几乎完全重做，api 完全不同，我也没有使用过1，打算直接使用 2，既然没有人写过，我尝试写一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fabric2-的使用&quot;&gt;&lt;a href=&quot;#fabric2-的使用&quot; class=&quot;headerlink&quot; title=&quot;fabric2 的使用&quot;&gt;&lt;/a&gt;fabric2 的使用&lt;/h1&gt;&lt;p&gt;找了一圈，居然没有发现介绍 fabric 2 的，众所周知，fabr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>更好的展示 JMeter HTML 报告</title>
    <link href="https://magaofei.github.io/2018/05/23/49.%20%E5%9F%BA%E4%BA%8E%20Flask%20%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89%E7%9A%84%20JMeter%20HTML%20%E6%8A%A5%E5%91%8A/"/>
    <id>https://magaofei.github.io/2018/05/23/49. 基于 Flask 展示所有的 JMeter HTML 报告/</id>
    <published>2018-05-23T14:56:37.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-为什么要做这个"><a href="#Why-为什么要做这个" class="headerlink" title="Why ? 为什么要做这个"></a>Why ? 为什么要做这个</h2><p>JMeter 通常自带 HTML 报告展示, 但是依旧需要下载到本地观看, 当然你也可以直接在服务器上配置好 nginx 访问. 但是查找和切换时依旧不够方便, 例如不能展示所有的报告信息, 需要手动拼接访问链接. 本项目就是为了解决这个问题, 可以展示指定报告目录, 自动拼接URL, 点击即可访问</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Python 查找指定目录下所有文件夹, Flask 部署 web 服务</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p><img src="http://os19wcerd.bkt.clouddn.com/20180523145744_j5mVxj_QQ20180523-145124.jpeg" alt=""></p><h3 id="跳转后"><a href="#跳转后" class="headerlink" title="跳转后"></a>跳转后</h3><p><img src="http://os19wcerd.bkt.clouddn.com/20180523145758_8eU7Yh_QQ20180523-144233.jpeg" alt=""></p><h2 id="GitHub-仓库"><a href="#GitHub-仓库" class="headerlink" title="GitHub 仓库"></a>GitHub 仓库</h2><p><a href="https://github.com/magaofei/jmeterWebReport" target="_blank" rel="noopener">https://github.com/magaofei/jmeterWebReport</a></p><h4 id="Update-2018年06月05日"><a href="#Update-2018年06月05日" class="headerlink" title="Update 2018年06月05日"></a>Update 2018年06月05日</h4><p>使用 nginx 的 <code>autoindex</code> 即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Why-为什么要做这个&quot;&gt;&lt;a href=&quot;#Why-为什么要做这个&quot; class=&quot;headerlink&quot; title=&quot;Why ? 为什么要做这个&quot;&gt;&lt;/a&gt;Why ? 为什么要做这个&lt;/h2&gt;&lt;p&gt;JMeter 通常自带 HTML 报告展示, 但是依旧需要下
      
    
    </summary>
    
    
      <category term="python" scheme="https://magaofei.github.io/tags/python/"/>
    
      <category term="jmeter" scheme="https://magaofei.github.io/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Docker For CentOS</title>
    <link href="https://magaofei.github.io/2018/05/01/48.%20DockerForCentos/"/>
    <id>https://magaofei.github.io/2018/05/01/48. DockerForCentos/</id>
    <published>2018-05-01T17:19:00.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name MyJenkins -p 8080:8080 -p 50000:50000 -v jenkins_home:&#x2F;var&#x2F;jenkins_home jenkins&#x2F;jenkins:lts</span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install -y yum-utils \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>性能测试时，使用sanic mock接口</title>
    <link href="https://magaofei.github.io/2018/04/11/48.%20%E4%BD%BF%E7%94%A8sanic%E6%A8%A1%E6%8B%9F%E6%8E%A5%E5%8F%A3/"/>
    <id>https://magaofei.github.io/2018/04/11/48. 使用sanic模拟接口/</id>
    <published>2018-04-11T12:56:56.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<p>#性能测试时，使用sanic mock接口</p><p>在做性能测试时，所压测的接口可能因为某种原因不能直接调用，这个时候我们可以模拟这个接口的响应时间。假设这个接口是没有问题的，那么只要我们的响应时间自定义就可以了</p><p>这里使用 <code>sanic</code> 对接口进行<code>mock</code> ，为什么需要这个？因为 <code>sanic</code> 足够快</p><p>以下为测试数据</p><p>压测机：  CPU：超线程12核  内存： 64G。</p><p>被压机器配置： CPU：超线程12核  内存： 64G。</p><p>工具：JMeter</p><p>网络环境：内网</p><table><thead><tr><th>Total</th><th>请求数</th><th>失败数</th><th>平均值</th><th>Min</th><th>Max</th><th>90%</th><th>95%</th><th>99%</th><th>TPS</th></tr></thead><tbody><tr><td>normal</td><td>378493</td><td>0.00%</td><td>15.58</td><td>0</td><td>10700</td><td>14.00</td><td>24.00</td><td>307.64</td><td>6324.03</td></tr><tr><td>100 ms</td><td>58497</td><td>0.00%</td><td>101.62</td><td>100</td><td>269</td><td>103.00</td><td>103.00</td><td>104.00</td><td>976.43</td></tr></tbody></table><p>GitHub地址：<a href="https://github.com/magaofei/mock_sanic" target="_blank" rel="noopener">https://github.com/magaofei/mock_sanic</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#性能测试时，使用sanic mock接口&lt;/p&gt;
&lt;p&gt;在做性能测试时，所压测的接口可能因为某种原因不能直接调用，这个时候我们可以模拟这个接口的响应时间。假设这个接口是没有问题的，那么只要我们的响应时间自定义就可以了&lt;/p&gt;
&lt;p&gt;这里使用 &lt;code&gt;sanic&lt;/co
      
    
    </summary>
    
    
      <category term="python" scheme="https://magaofei.github.io/tags/python/"/>
    
      <category term="mock" scheme="https://magaofei.github.io/tags/mock/"/>
    
      <category term="性能测试" scheme="https://magaofei.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Web端测试工具的一点尝试</title>
    <link href="https://magaofei.github.io/2018/04/05/47.%20Web%E7%AB%AF%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%9D%E8%AF%95/"/>
    <id>https://magaofei.github.io/2018/04/05/47. Web端测试工具的一点尝试/</id>
    <published>2018-04-05T19:31:00.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web端测试工具的一点尝试"><a href="#Web端测试工具的一点尝试" class="headerlink" title="Web端测试工具的一点尝试"></a>Web端测试工具的一点尝试</h1><p>在测试工作期间有一件很占据时间且很不必要的事情，就是造数据，来到现在这个团队后，为了解决这个需求，我们做了一点尝试，在这里分享一下。</p><h4 id="Web端的优势"><a href="#Web端的优势" class="headerlink" title="Web端的优势"></a>Web端的优势</h4><p>Web最大的一个优势就是不需要客户端主动更新，大家知道，测试工具有一个最重要的问题就是落地，最头疼的是做出来没人用，所以Web的形式可以很好的弥补这个问题。</p><h4 id="举个创建直播的例子"><a href="#举个创建直播的例子" class="headerlink" title="举个创建直播的例子"></a>举个创建直播的例子</h4><p>这是一家教育公司，部门做在线教育，既然是在线就要上课，我们把每次上课归类为一个直播，测试当中需要频繁的创建符合要求的直播。</p><p>以前的流程是 登录后台—&gt;创建直播—&gt;关联直播到指定日期的课程中—&gt;去另外一个平台关联讲义(可选)</p><p>改造后的流程 登录QA测试工具网站—&gt;创建直播并关联指定课程和讲义。</p><p>用一个表单去解决这些事情，其实就是重新做了一个前端出来，我们把一些主要的接口抽离出来，自己去实现这些功能，只保留一些必要的参数，比如名称、老师名、课程id，其他的可以给一个默认值，比如日期默认当天，设定默认科目、年级、讲义。之前可能需要3~10分钟去做的一件事，现在输入几个数值，点几下鼠标就可以了，可以说极大的加快了测试的效率。而且不仅测试在用，包括技术支持、部分开发、其他业务部分也会使用到，如果在以前可能需要测试帮忙造数据，不仅慢，还很不情愿，现在只需要给他们开个帐号就可以了。</p><p>为了方便测试，我们也支持线上，不过做了严格限制，只有符合指定条件的才能够创建。</p><p>当然还有其他的一些功能，比如查询用户购买的课程、报名课程、查询直播信息等，以前这些可能需要手动操作或者查询数据库，现在使用表单就可以完成了。</p><p>界面：<img src="/images/20180405203016_dfO6av_Screenshot.jpg" alt="20180405203016_dfO6av_Screenshot"></p><p>给大家放一个API的使用量统计图<img src="/images/20180405195818_jLKTvb_Screenshot.jpg" alt="20180405195818_jLKTvb_Screenshot"></p><h4 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h4><p>在这当中有一个步骤是关联课程，关联课程的接口需要传入一个直播id，也就是刚刚创建好的直播，可后端没有任何返回。</p><p>我的思路是到数据库查符合条件最新的那个，运行了一段，有同事反馈说有偶现BUG——创建直播之后关联课程失败。一直无法复现，直到有一次服务不可用长达1分多钟，才发现了问题所在，是主从库延迟。运维给的是从库，而主从库有延迟，主库有数据，从库没有查到，并且我们不可能有访问主库的权限，后来我加了一个查库的轮询，每隔一个时间段就查一次数据，这下应该没什么问题了吧？后来发现有接口超时，轮询的时候接口本身就超时了。还想让开发改下代码，返回ID，我看了下那段代码，已经有3年多了，写的挺烂的，我估计谁都不想碰，而且改了还得测吧。最后只得自己想办法，想到了一个方案，请求关联课程的HTML网页，再用一个正则，把直播讲ID取到，解决了，只不过是开发那段代码可以在主库上跑而已。</p><h4 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h4><p>目前主要使用 Django + Vue ，尽量做到前后端分离。</p><p>只是调用第三方的API，所以这里用不到存储，主要是处理请求，写好功能函数，做好异常处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Web端测试工具的一点尝试&quot;&gt;&lt;a href=&quot;#Web端测试工具的一点尝试&quot; class=&quot;headerlink&quot; title=&quot;Web端测试工具的一点尝试&quot;&gt;&lt;/a&gt;Web端测试工具的一点尝试&lt;/h1&gt;&lt;p&gt;在测试工作期间有一件很占据时间且很不必要的事情，就是
      
    
    </summary>
    
    
      <category term="测试" scheme="https://magaofei.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python Code Style</title>
    <link href="https://magaofei.github.io/2018/03/10/46.%20Python%20Code%20Style/"/>
    <id>https://magaofei.github.io/2018/03/10/46. Python Code Style/</id>
    <published>2018-03-10T19:50:30.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Code-Style"><a href="#Python-Code-Style" class="headerlink" title="Python Code Style"></a>Python Code Style</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h4 id="1-遵循-REP-8-标准"><a href="#1-遵循-REP-8-标准" class="headerlink" title="1. 遵循 REP 8 标准"></a>1. 遵循 REP 8 标准</h4><p>使用说明： <a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/" target="_blank" rel="noopener">http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/</a></p><h4 id="2-print-函数使用"><a href="#2-print-函数使用" class="headerlink" title="2. print 函数使用"></a>2. print 函数使用</h4><p>使用 <code>print(&#39;HelloWorld&#39;)</code> 而不是 <code>print &#39;HelloWorld&#39;</code> </p><p>这样会更有利于理解，print是一个函数</p><h4 id="3-拼接字符串"><a href="#3-拼接字符串" class="headerlink" title="3. 拼接字符串"></a>3. 拼接字符串</h4><p>通常在拼接字符串的时候，你可能会这样写</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foo = <span class="string">'foo'</span> + <span class="string">'&amp;'</span> + <span class="string">';'</span></span><br></pre></td></tr></table></figure><p>更好的方式其实是</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foo = <span class="string">'''&#123;&#125;&amp;;'''</span>.format(foo)</span><br></pre></td></tr></table></figure><h4 id="4-Pythonic-写法"><a href="#4-Pythonic-写法" class="headerlink" title="4. Pythonic 写法"></a>4. Pythonic 写法</h4><p>如果你之前学习过 Java C 等语言，那么你可能会写出下面这样的代码：</p><p>求一百里面能被3整除的数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> item % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        data.append(item)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    print(i+<span class="number">1</span>, <span class="string">":"</span>, data[i])</span><br></pre></td></tr></table></figure><p>Pythonic 的写法是</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [ item <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">100</span>) <span class="keyword">if</span> item % <span class="number">3</span> == <span class="number">0</span> ]</span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(data, start=<span class="number">1</span>):</span><br><span class="line">    print(index, <span class="string">":"</span>, item)</span><br></pre></td></tr></table></figure><p>这样的写法成为列表推导，效率要比上面的 for 循环要高</p><p>注意，一般只在创建新列表时使用。<a href="https://www.zhihu.com/question/34637934" target="_blank" rel="noopener">相关说明</a></p><a id="more"></a><h4 id="5-函数要短小"><a href="#5-函数要短小" class="headerlink" title="5. 函数要短小"></a>5. 函数要短小</h4><p>每个函数尽量只做一件事</p><h4 id="6-数字抽离"><a href="#6-数字抽离" class="headerlink" title="6. 数字抽离"></a>6. 数字抽离</h4><p>如果一个字段在数据库中是以数字存储的，比如测试环境代表0，线上环境代表1，在使用时不要直接书写0和1，而要用变量代替，比如</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CESHI = <span class="number">0</span></span><br><span class="line">ONLINE = <span class="number">1</span></span><br><span class="line">getcookie(ONLINE)</span><br></pre></td></tr></table></figure><h4 id="7-在每个函数下面写注释"><a href="#7-在每个函数下面写注释" class="headerlink" title="7. 在每个函数下面写注释"></a>7. 在每个函数下面写注释</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sum</span><span class="params">(foo, bar)</span>:</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  验证相加的结果</span></span><br><span class="line"><span class="string">  :param foo 第一个数值</span></span><br><span class="line"><span class="string">  :param bar 第二个数值</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="8-字典取值"><a href="#8-字典取值" class="headerlink" title="8. 字典取值"></a>8. 字典取值</h4><p>平时可能用的更多的是 <code>foo[&#39;bar&#39;]</code> 这种取值和写值，但还有其他方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取值</span></span><br><span class="line">foo.get(<span class="string">'bar'</span>) <span class="comment"># 如果没有 bar 就返回 None</span></span><br><span class="line">foo.get(<span class="string">'bar'</span>, <span class="string">'BAR'</span>) <span class="comment"># 如果没有 bar 会返回默认值 BAR</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-Code-Style&quot;&gt;&lt;a href=&quot;#Python-Code-Style&quot; class=&quot;headerlink&quot; title=&quot;Python Code Style&quot;&gt;&lt;/a&gt;Python Code Style&lt;/h1&gt;&lt;h2 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h2&gt;&lt;h4 id=&quot;1-遵循-REP-8-标准&quot;&gt;&lt;a href=&quot;#1-遵循-REP-8-标准&quot; class=&quot;headerlink&quot; title=&quot;1. 遵循 REP 8 标准&quot;&gt;&lt;/a&gt;1. 遵循 REP 8 标准&lt;/h4&gt;&lt;p&gt;使用说明： &lt;a href=&quot;http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-print-函数使用&quot;&gt;&lt;a href=&quot;#2-print-函数使用&quot; class=&quot;headerlink&quot; title=&quot;2. print 函数使用&quot;&gt;&lt;/a&gt;2. print 函数使用&lt;/h4&gt;&lt;p&gt;使用 &lt;code&gt;print(&amp;#39;HelloWorld&amp;#39;)&lt;/code&gt; 而不是 &lt;code&gt;print &amp;#39;HelloWorld&amp;#39;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;这样会更有利于理解，print是一个函数&lt;/p&gt;
&lt;h4 id=&quot;3-拼接字符串&quot;&gt;&lt;a href=&quot;#3-拼接字符串&quot; class=&quot;headerlink&quot; title=&quot;3. 拼接字符串&quot;&gt;&lt;/a&gt;3. 拼接字符串&lt;/h4&gt;&lt;p&gt;通常在拼接字符串的时候，你可能会这样写&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;foo = &lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更好的方式其实是&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;foo = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&amp;#123;&amp;#125;&amp;amp;;&#39;&#39;&#39;&lt;/span&gt;.format(foo)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-Pythonic-写法&quot;&gt;&lt;a href=&quot;#4-Pythonic-写法&quot; class=&quot;headerlink&quot; title=&quot;4. Pythonic 写法&quot;&gt;&lt;/a&gt;4. Pythonic 写法&lt;/h4&gt;&lt;p&gt;如果你之前学习过 Java C 等语言，那么你可能会写出下面这样的代码：&lt;/p&gt;
&lt;p&gt;求一百里面能被3整除的数&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; item % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data.append(item)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(data)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;, data[i])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Pythonic 的写法是&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data = [ item &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; item % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index, item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(data, start=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(index, &lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;, item)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的写法成为列表推导，效率要比上面的 for 循环要高&lt;/p&gt;
&lt;p&gt;注意，一般只在创建新列表时使用。&lt;a href=&quot;https://www.zhihu.com/question/34637934&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;相关说明&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://magaofei.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用 uwsgi 驱动 Django 应用</title>
    <link href="https://magaofei.github.io/2018/03/08/45.%20%E4%BD%BF%E7%94%A8%20uwsgi%20%E9%A9%B1%E5%8A%A8%20Django/"/>
    <id>https://magaofei.github.io/2018/03/08/45. 使用 uwsgi 驱动 Django/</id>
    <published>2018-03-08T15:02:06.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-uwsgi-驱动-Django-应用"><a href="#使用-uwsgi-驱动-Django-应用" class="headerlink" title="使用 uwsgi 驱动 Django 应用"></a>使用 uwsgi 驱动 Django 应用</h1><p>个人认为 uwsgi 是用来对部署的应用进行进程管理的，接收 <code>nginx/apache</code> 转发来的请求，分配进程通过 <code>uwsgi</code> 协议调起应用。类似于 Tomcat 等应用。</p><h4 id="安装和配置-uwsgi"><a href="#安装和配置-uwsgi" class="headerlink" title="安装和配置 uwsgi"></a>安装和配置 uwsgi</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><p>这里用 <code>Django</code> 举例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果使用了虚拟环境，记得先切换虚拟环境</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> project_path 替换成你自己的目录名</span></span><br><span class="line">uwsgi --socket 127.0.0.1:7000 --wsgi-file project_path/wsgi.py</span><br></pre></td></tr></table></figure><p>这是一个最简单的启动配置，可以先尝试服务能不能正常启动，随后我们会给一个配置文件。</p><a id="more"></a><h4 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># project_path 替换为你自己的目录</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>     [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line">    <span class="attribute">root</span> project_path;</span><br><span class="line">    <span class="attribute">index</span> project_path/app/index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /data/nginx_logs/example.access.log;</span><br><span class="line">    <span class="attribute">error_log</span>   /data/nginx_logs/example.<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态资源文件配置</span></span><br><span class="line">    <span class="attribute">location</span> /static &#123;</span><br><span class="line">        <span class="attribute">alias</span> project_path/static/project;</span><br><span class="line">        <span class="attribute">expires</span>    <span class="number">3h</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">uwsgi_pass</span> <span class="number">127.0.0.1:7000</span>;</span><br><span class="line">        <span class="attribute">include</span> uwsgi_params;</span><br><span class="line">        <span class="attribute">uwsgi_param</span> UWSGI_PYHOME project_path/env;</span><br><span class="line">        <span class="attribute">uwsgi_param</span> UWSGI_CHDIR  project_path;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过设置 <code>nginx</code> 的 <code>listen</code> <code>server_name</code>指定端口和域名，<code>location</code> 里面的 <code>/static</code> 设置静态文件，因为我们将静态文件放在了项目目录里。</p><p><code>uwsgi_pass</code> 将转发到指定端口，由 <code>uwsgi</code>接收</p><p>接着启动 <code>nginx</code> 或重新加载就可以了。</p><h4 id="uwsgi-详细配置"><a href="#uwsgi-详细配置" class="headerlink" title="uwsgi 详细配置"></a>uwsgi 详细配置</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config.ini</span></span><br><span class="line"><span class="comment"># 注意，在 Windows 上更改此文件时一定确保编码为 UTF-8</span></span><br><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">socket</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7000</span></span><br><span class="line"><span class="comment"># uwsgi 启动时所使用的地址与端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指向网站目录  绝对路径</span></span><br><span class="line"><span class="attr">chdir</span> = project_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># python 启动程序文件，替换成自己的名称</span></span><br><span class="line"><span class="attr">module</span> = project.wsgi:application</span><br><span class="line"></span><br><span class="line"><span class="attr">pidfile</span> = /data/uwsgi_logs/project_name.pid</span><br><span class="line"></span><br><span class="line"><span class="attr">logto</span> = /data/uwsgi_logs/project_name.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个 worker 进程接收 1000 请求</span></span><br><span class="line"><span class="attr">max-requests</span>=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">virtualenv</span> = env</span><br><span class="line"></span><br><span class="line"><span class="attr">pythonpath</span> = .</span><br><span class="line"></span><br><span class="line"><span class="comment"># python 程序内用以启动的 application 变量名</span></span><br><span class="line"><span class="attr">callable</span> = application</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理器数</span></span><br><span class="line"><span class="comment">; processes = 5</span></span><br><span class="line"><span class="attr">workers</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置“harakiri ”的超时</span></span><br><span class="line"><span class="attr">harakiri</span> = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enable-threads</span> = <span class="literal">true</span> <span class="comment">#允许用内嵌的语言启动线程。这将允许你在app程序中产生一个子线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程数</span></span><br><span class="line"><span class="attr">threads</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">master</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#状态检测地址</span></span><br><span class="line"><span class="attr">stats</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9191</span></span><br></pre></td></tr></table></figure><h5 id="从-ini-文件加载-uwsgi-配置"><a href="#从-ini-文件加载-uwsgi-配置" class="headerlink" title="从 ini 文件加载 uwsgi 配置"></a>从 ini 文件加载 uwsgi 配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uwsgi config.ini</span><br></pre></td></tr></table></figure><p>执行完毕就，就可以关闭终端了，uwsgi 会一直在后台运行</p><h4 id="uwsgi-常用命令"><a href="#uwsgi-常用命令" class="headerlink" title="uwsgi 常用命令"></a>uwsgi 常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> reload</span></span><br><span class="line">uwsgi --reload /data/uwsgi_logs/project_name.pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制关闭</span></span><br><span class="line">uwsgi killall -s KILL INI /data/tool/env/bin/uwsgi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用-uwsgi-驱动-Django-应用&quot;&gt;&lt;a href=&quot;#使用-uwsgi-驱动-Django-应用&quot; class=&quot;headerlink&quot; title=&quot;使用 uwsgi 驱动 Django 应用&quot;&gt;&lt;/a&gt;使用 uwsgi 驱动 Django 应用&lt;/h1&gt;&lt;p&gt;个人认为 uwsgi 是用来对部署的应用进行进程管理的，接收 &lt;code&gt;nginx/apache&lt;/code&gt; 转发来的请求，分配进程通过 &lt;code&gt;uwsgi&lt;/code&gt; 协议调起应用。类似于 Tomcat 等应用。&lt;/p&gt;
&lt;h4 id=&quot;安装和配置-uwsgi&quot;&gt;&lt;a href=&quot;#安装和配置-uwsgi&quot; class=&quot;headerlink&quot; title=&quot;安装和配置 uwsgi&quot;&gt;&lt;/a&gt;安装和配置 uwsgi&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install uwsgi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里用 &lt;code&gt;Django&lt;/code&gt; 举例&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 如果使用了虚拟环境，记得先切换虚拟环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; project_path 替换成你自己的目录名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uwsgi --socket 127.0.0.1:7000 --wsgi-file project_path/wsgi.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是一个最简单的启动配置，可以先尝试服务能不能正常启动，随后我们会给一个配置文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="django" scheme="https://magaofei.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>利用 Nginx 展示 JMeter 报告</title>
    <link href="https://magaofei.github.io/2018/03/08/44.%20%E5%88%A9%E7%94%A8%20Nginx%20%E5%B1%95%E7%A4%BA%20JMeter%20%E6%8A%A5%E5%91%8A/"/>
    <id>https://magaofei.github.io/2018/03/08/44. 利用 Nginx 展示 JMeter 报告/</id>
    <published>2018-03-08T09:58:51.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用-Nginx-展示-JMeter-报告"><a href="#利用-Nginx-展示-JMeter-报告" class="headerlink" title="利用 Nginx 展示 JMeter 报告"></a>利用 Nginx 展示 JMeter 报告</h1><p>用过JMeter的都知道整理报告是多么的麻烦，首先脚本要放到服务器运行，然后把结果文件 (.jtl )或者网页报告下载下来在本地打开，那么既然 JMeter 可以为我们生成网页报告的形式，那我们为什么不能直接打开展示呢？</p><p>当然是可以的，只需要服务器对公网开放，另外需要一个 nginx 或者 apache 的支持。在这里我们使用 nginx 来完成。</p><a id="more"></a><p>目标效果：</p><p><img src="http://os19wcerd.bkt.clouddn.com/20180308101959_azaMop_20180308101937.jpeg" alt=""></p><p>首先在服务器安装 nginx </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><p>nginx默认配置在 <code>/etc/nginx/nginx.conf</code> 里面，还有详细配置 <code>/etc/nginx/conf.d/default.conf</code></p><p>我们需要设置一下 nginx 的权限，在 <code>nginx.conf</code> 里边，修改 <code>user nginx;</code> 为 <code>user youruser</code> ，这个 <code>youruser</code>需要设置成你文件的属主的用户，否则在访问时会提示 403 。</p><p>接下来我们配置一个我们自己的网站，先把 默认配置注释掉  </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak</span><br></pre></td></tr></table></figure><p>然后创建一个新的配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/conf.d/jmeter.conf</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  jmeter.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 假如我的用户此时是work</span></span><br><span class="line">    <span class="attribute">root</span>   /home/work/report;</span><br><span class="line">    <span class="attribute">index</span>  index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我将报告的目录设置为 <code>/home/work/report</code> 需要提前创建</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/work/report</span><br></pre></td></tr></table></figure><p>接下来启动 <code>nginx</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><p>另外我们需要在本机绑定 <code>host</code> 才可以访问</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mac </span></span><br><span class="line">sudo vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> add to hosts</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把IP 地址换成你自己服务器的，这里我只是填了个示例</span></span><br><span class="line">111.111.111.111 jmeter.com</span><br></pre></td></tr></table></figure><p>到这里基本上就结束了，我们只需要在执行 JMeter 时指定报告的目录即可，比如</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh jmeter.sh -n -t example.jmx -l example.jtl -e -o /home/work/report/example</span><br></pre></td></tr></table></figure><p>接下来我访问 <code>http://jmeter.com/example</code> 就可以看到报告了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;利用-Nginx-展示-JMeter-报告&quot;&gt;&lt;a href=&quot;#利用-Nginx-展示-JMeter-报告&quot; class=&quot;headerlink&quot; title=&quot;利用 Nginx 展示 JMeter 报告&quot;&gt;&lt;/a&gt;利用 Nginx 展示 JMeter 报告&lt;/h1&gt;&lt;p&gt;用过JMeter的都知道整理报告是多么的麻烦，首先脚本要放到服务器运行，然后把结果文件 (.jtl )或者网页报告下载下来在本地打开，那么既然 JMeter 可以为我们生成网页报告的形式，那我们为什么不能直接打开展示呢？&lt;/p&gt;
&lt;p&gt;当然是可以的，只需要服务器对公网开放，另外需要一个 nginx 或者 apache 的支持。在这里我们使用 nginx 来完成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="https://magaofei.github.io/tags/nginx/"/>
    
      <category term="jmeter" scheme="https://magaofei.github.io/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>macOS 下常用软件安装和配置</title>
    <link href="https://magaofei.github.io/2018/02/28/43.%20macOS%20%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://magaofei.github.io/2018/02/28/43. macOS 下常用安装和配置/</id>
    <published>2018-02-28T12:28:00.000Z</published>
    <updated>2021-03-01T21:30:01.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="macOS-下常用软件安装和配置"><a href="#macOS-下常用软件安装和配置" class="headerlink" title="macOS 下常用软件安装和配置"></a>macOS 下常用软件安装和配置</h1><p>适用于刚刚接触macOS 系统的同学。</p><p>macOS 和Windows不同，所以不要把Windows的使用习惯带到 macOS 上 😁</p><h4 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h4><p>Homebrew是一个包管理器，就相当于 <code>yum</code> 和 <code>apt</code> ，通过 Homebrew 我们可以在macOS上安装软件。它有几个优点，最重要的就是不需要超级管理员权限，比如默认的 <code>pip</code> 安装一些库的时候，每次都需要 <code>sudo</code> </p><a id="more"></a><h4 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可能会提示你安装Xcode Command Line 耐心等待即可</span></span><br></pre></td></tr></table></figure><h4 id="使用Homebrew安装"><a href="#使用Homebrew安装" class="headerlink" title="使用Homebrew安装"></a>使用Homebrew安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> python3</span></span><br><span class="line">brew install python3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> nodejs</span></span><br><span class="line">brew install node@8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> jmeter 安装完毕后在 终端 直接输入 jmeter 即可</span></span><br><span class="line">brew install jmeter</span><br><span class="line"></span><br><span class="line">brew install redis</span><br><span class="line"></span><br><span class="line">brew install ruby</span><br><span class="line"></span><br><span class="line">brew install mysql</span><br><span class="line"></span><br><span class="line">brew install maven</span><br><span class="line"></span><br><span class="line">brew install git</span><br><span class="line"><span class="meta">#</span><span class="bash"> ...</span></span><br></pre></td></tr></table></figure><h4 id="遇到目录权限问题"><a href="#遇到目录权限问题" class="headerlink" title="遇到目录权限问题"></a>遇到目录权限问题</h4><p>10.13之后，使用HomeBrew安装某些软件可能会遇到目录权限问题</p><p>执行一下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chown -R $(whoami) $(brew --prefix)/*</span><br></pre></td></tr></table></figure><p>如果提示缺少目录，需要先执行创建目录的操作，比如</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/local/lib</span><br><span class="line">sudo mkdir /usr/local/Frameworks</span><br></pre></td></tr></table></figure><h4 id="使用Homebrew安装软件"><a href="#使用Homebrew安装软件" class="headerlink" title="使用Homebrew安装软件"></a>使用Homebrew安装软件</h4><p>现在 Homebrew 支持安装一些常用的软件，使用 <code>brew cask install</code> 即可</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> install java8</span></span><br><span class="line">brew tap caskroom/versions</span><br><span class="line">brew cask install java8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推荐使用 iterm2 替代 系统自带的terminal </span></span><br><span class="line">brew cask install iterm2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> chrome</span></span><br><span class="line">brew cask install google-chrome</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sublime</span></span><br><span class="line">brew cask install sublime-text</span><br></pre></td></tr></table></figure><h4 id="ZSH"><a href="#ZSH" class="headerlink" title="ZSH"></a>ZSH</h4><p>系统默认自带的是 <code>bash</code> ，我个人比较喜欢 <code>zsh</code> ，也是 shell 的一种，但更灵活，更强大。<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">相关配置</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br></pre></td></tr></table></figure><h4 id="配置-shadowsocks"><a href="#配置-shadowsocks" class="headerlink" title="配置 shadowsocks"></a>配置 shadowsocks</h4><p>如果你使用 <code>shadowsocks</code> 在下载完客户端之后就可以使用了，这里只提醒两点，Git 和 终端 需要额外设置。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> terminal</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6152或1080 改为你自己的端口号</span></span><br><span class="line">export https_proxy=http://127.0.0.1:6152;export http_proxy=http://127.0.0.1:6152;export all_proxy=http://127.0.0.1:6152</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> git</span></span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> or sock</span></span><br><span class="line">git config --global http.proxy 'socks5://127.0.0.1:1080'</span><br><span class="line">git config --global https.proxy 'socks5://127.0.0.1:1080'</span><br></pre></td></tr></table></figure><h4 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Java 开发必备工具 IntelliJ IDEA。可以安装 Ultimate Edition：</span></span><br><span class="line">brew cask install intellij-idea</span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以安装开源免费的 Community Edition：</span></span><br><span class="line">brew cask install intellij-idea-ce</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;macOS-下常用软件安装和配置&quot;&gt;&lt;a href=&quot;#macOS-下常用软件安装和配置&quot; class=&quot;headerlink&quot; title=&quot;macOS 下常用软件安装和配置&quot;&gt;&lt;/a&gt;macOS 下常用软件安装和配置&lt;/h1&gt;&lt;p&gt;适用于刚刚接触macOS 系统的同学。&lt;/p&gt;
&lt;p&gt;macOS 和Windows不同，所以不要把Windows的使用习惯带到 macOS 上 😁&lt;/p&gt;
&lt;h4 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;Homebrew&lt;/h4&gt;&lt;p&gt;Homebrew是一个包管理器，就相当于 &lt;code&gt;yum&lt;/code&gt; 和 &lt;code&gt;apt&lt;/code&gt; ，通过 Homebrew 我们可以在macOS上安装软件。它有几个优点，最重要的就是不需要超级管理员权限，比如默认的 &lt;code&gt;pip&lt;/code&gt; 安装一些库的时候，每次都需要 &lt;code&gt;sudo&lt;/code&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="https://magaofei.github.io/tags/macOS/"/>
    
  </entry>
  
</feed>
